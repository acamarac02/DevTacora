"use strict";(self.webpackChunkpmdm=self.webpackChunkpmdm||[]).push([[2863],{28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>d});var s=n(96540);const r={},i=s.createContext(r);function o(e){const a=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:a},e.children)}},68274:(e,a,n)=>{n.d(a,{A:()=>s});const s=n.p+"assets/files/Ejercicio relaciones. Misiones-03e4260a59fbe1abe32e309026fc0f6e.pdf"},75474:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>d,default:()=>j,frontMatter:()=>o,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"ada_2425/ut5_bbdd_nosql/mongodb/gestion-relaciones-Java","title":"Mapeo y gesti\xf3n de relaciones en Java","description":"Cuando utilizas el conector oficial de MongoDB para Java (mongodb-driver-sync), el mapeo de relaciones no se realiza de manera autom\xe1tica como en frameworks como JPA o Morphia. En su lugar, debes trabajar directamente con los datos de MongoDB y gestionar las relaciones manualmente. Esto implica dise\xf1ar tus POJOs y estructurar los documentos MongoDB adecuadamente para reflejar esas relaciones.","source":"@site/docs/00_ada_2425/ut5_bbdd_nosql/mongodb/5-gestion-relaciones-Java.md","sourceDirName":"00_ada_2425/ut5_bbdd_nosql/mongodb","slug":"/ada_2425/ut5_bbdd_nosql/mongodb/gestion-relaciones-Java","permalink":"/DevTacora/docs/ada_2425/ut5_bbdd_nosql/mongodb/gestion-relaciones-Java","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"sidebar_label":"Gesti\xf3n de relaciones en Java","title":"Mapeo y gesti\xf3n de relaciones en Java"},"sidebar":"ada_2425_Sidebar","previous":{"title":"Dise\xf1o documental","permalink":"/DevTacora/docs/ada_2425/ut5_bbdd_nosql/mongodb/diseno-documental"}}');var r=n(74848),i=n(28453);const o={sidebar_position:5,sidebar_label:"Gesti\xf3n de relaciones en Java",title:"Mapeo y gesti\xf3n de relaciones en Java"},d="Mapeo y gesti\xf3n de relaciones en Java",l={},t=[{value:"Mapeo de la relaci\xf3n 1:1 embebida",id:"mapeo-de-la-relaci\xf3n-11-embebida",level:2},{value:"Definir los POJOs",id:"definir-los-pojos",level:3},{value:"Operaciones CRUD",id:"operaciones-crud",level:3},{value:"<strong>2.1. Crear un Personaje con un Arma</strong>",id:"21-crear-un-personaje-con-un-arma",level:4},{value:"<strong>2.2. Leer un Personaje con su Arma</strong>",id:"22-leer-un-personaje-con-su-arma",level:4},{value:"<strong>3.3. Actualizar el Arma de un Personaje</strong>",id:"33-actualizar-el-arma-de-un-personaje",level:4},{value:"<strong>3.4. Eliminar un Personaje</strong>",id:"34-eliminar-un-personaje",level:4},{value:"Mapeo de la relaci\xf3n 1:N bidireccional",id:"mapeo-de-la-relaci\xf3n-1n-bidireccional",level:2},{value:"Definir los POJOs",id:"definir-los-pojos-1",level:3},{value:"<strong>1.1. Clase Habilidad</strong>",id:"11-clase-habilidad",level:4},{value:"<strong>1.2. Clase Personaje</strong>",id:"12-clase-personaje",level:4},{value:"Operaciones CRUD",id:"operaciones-crud-1",level:3},{value:"<strong>2.1. Crear un Personaje con su Habilidad</strong>",id:"21-crear-un-personaje-con-su-habilidad",level:4},{value:"<strong>2.2. Leer un Personaje con su Habilidad</strong>",id:"22-leer-un-personaje-con-su-habilidad",level:4},{value:"<strong>2.3. Actualizar la Habilidad de un Personaje</strong>",id:"23-actualizar-la-habilidad-de-un-personaje",level:4},{value:"<strong>2.4. Eliminar un Personaje y su Referencia en Habilidad</strong>",id:"24-eliminar-un-personaje-y-su-referencia-en-habilidad",level:4},{value:"Mapeo de la relaci\xf3n N:M",id:"mapeo-de-la-relaci\xf3n-nm",level:2},{value:"Definir los POJOs",id:"definir-los-pojos-2",level:3},{value:"<strong>1.1. Clase Debilidad</strong>",id:"11-clase-debilidad",level:4},{value:"<strong>1.2. Clase Personaje</strong>",id:"12-clase-personaje-1",level:4},{value:"Operaciones CRUD",id:"operaciones-crud-2",level:3},{value:"<strong>2.1. Asociar Debilidades a un Personaje</strong>",id:"21-asociar-debilidades-a-un-personaje",level:4},{value:"<strong>2.2. Leer un Personaje con sus Debilidades</strong>",id:"22-leer-un-personaje-con-sus-debilidades",level:4},{value:"<strong>2.3. Desasociar una Debilidad de un Personaje</strong>",id:"23-desasociar-una-debilidad-de-un-personaje",level:4},{value:"<strong>2.4. Eliminar un Personaje</strong>",id:"24-eliminar-un-personaje",level:4},{value:"Ejercicio",id:"ejercicio",level:2}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)("div",{class:"justify-text",children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"mapeo-y-gesti\xf3n-de-relaciones-en-java",children:"Mapeo y gesti\xf3n de relaciones en Java"})}),(0,r.jsxs)(a.p,{children:["Cuando utilizas el conector oficial de ",(0,r.jsx)(a.strong,{children:"MongoDB para Java (mongodb-driver-sync)"}),", el mapeo de relaciones no se realiza de manera autom\xe1tica como en frameworks como JPA o Morphia. En su lugar, debes trabajar directamente con los datos de MongoDB y ",(0,r.jsx)(a.strong,{children:"gestionar las relaciones manualmente"}),". Esto implica dise\xf1ar tus POJOs y estructurar los documentos MongoDB adecuadamente para reflejar esas relaciones."]}),(0,r.jsx)(a.p,{children:"Vamos a ver la gesti\xf3n de las diferentes relaciones y opciones de modelado mediante el ejercicio de los Personajes. Supongamos que tenemos estas colecciones:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",metastring:'title="Colecci\xf3n Personajes"',children:'{\n  "_id": 1,\n  "nombre": "Caballero oscuro",\n  "arma": {\n       "nombre": "Espada Larga",\n       "descripcion": "Una espada con filo brillante y equilibrada."\n     },\n  "habilidades": 201,\n  "debilidades_ids": [301, 302]\n}\n'})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",metastring:'title="Colecci\xf3n Habilidades"',children:'   {\n     "_id": 201,\n     "nombre": "Fuerza Sobrehumana",\n     "descripcion": "Incrementa la fuerza f\xedsica.",\n     "personajes_ids": [1, 3]\n   }\n'})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",metastring:'title="Colecci\xf3n Debilidades"',children:'{\n  "_id": 301,\n  "nombre": "Fobia al fuego",\n  "descripcion": "El personaje teme al fuego"\n}\n{\n  "_id": 302,\n  "nombre": "Miedo a las alturas",\n  "descripcion": "El personaje teme a las alturas"\n}\n'})}),(0,r.jsx)(a.p,{children:"El Personaje es la entidad principal, pues nuestros casos de uso giran en torno a ella. En resumen, tenemos las siguientes relaciones:"}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"1:1 entre Personaje y Arma. Se ha decidido embeber el arma dentro del personaje."}),"\n",(0,r.jsxs)(a.li,{children:["1",":N"," entre Personaje y Habilidad, de forma que un Personaje tiene una Habilidad y una Habilidad la pueden tener varios personajes. Se ha optado por usar referencias para mantener ambas entidades independientes. Adem\xe1s, se ha hecho bidireccional la relaci\xf3n."]}),"\n",(0,r.jsxs)(a.li,{children:["N",":M"," entre Personaje y Debilidad. Se ha decidido referenciar las habilidades desde el Personaje."]}),"\n"]}),(0,r.jsx)(a.h2,{id:"mapeo-de-la-relaci\xf3n-11-embebida",children:"Mapeo de la relaci\xf3n 1:1 embebida"}),(0,r.jsxs)(a.p,{children:["Vamos a ver c\xf3mo modelar la relaci\xf3n ",(0,r.jsx)(a.strong,{children:"Personaje - Arma (1:1 Embebido)"})," y c\xf3mo realizar las operaciones CRUD. Cuando la relaci\xf3n es ",(0,r.jsx)(a.strong,{children:"embebida"}),", significa que la entidad principal (en este caso, ",(0,r.jsx)(a.strong,{children:"Personaje"}),") contiene directamente los datos de la entidad relacionada (",(0,r.jsx)(a.strong,{children:"Arma"}),") como parte de su estructura, en lugar de usar referencias o almacenarla en una colecci\xf3n separada. Esto se representa en el c\xf3digo creando un atributo en la clase principal cuya ",(0,r.jsx)(a.strong,{children:"tipo de dato es la clase del objeto embebido"}),"."]}),(0,r.jsx)(a.p,{children:"En este caso:"}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["Personaje tiene un atributo ",(0,r.jsx)(a.code,{children:"arma"})," que es de tipo Arma."]}),"\n",(0,r.jsx)(a.li,{children:"Los datos de Arma se almacenan como un subdocumento dentro del documento de Personaje en la base de datos MongoDB."}),"\n"]}),(0,r.jsx)(a.h3,{id:"definir-los-pojos",children:"Definir los POJOs"}),(0,r.jsxs)(a.p,{children:["La clase ",(0,r.jsx)(a.code,{children:"Arma"})," ser\xe1 un subdocumento dentro del documento de ",(0,r.jsx)(a.code,{children:"Personaje"}),". Este es el modelo del arma:"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="model.Arma"',children:"public class Arma {\n    private String nombre;\n    private String descripcion;\n\n    // Constructores (obligatorio tener siempre en el de por defecto para la serializaci\xf3n)\n\n    // Getters y setters\n}\n"})}),(0,r.jsxs)(a.p,{children:["La clase ",(0,r.jsx)(a.code,{children:"Personaje"})," contiene el subdocumento ",(0,r.jsx)(a.code,{children:"Arma"})," embebido:"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"public class Personaje {\n    private ObjectId id;\n    private String nombre;\n    private Arma arma; // Relaci\xf3n 1:1 embebida\n\n    // Constructores\n\n    // Getters y setters\n}\n"})}),(0,r.jsx)(a.h3,{id:"operaciones-crud",children:"Operaciones CRUD"}),(0,r.jsxs)(a.p,{children:["Estas operaciones las incluiremos en la clase ",(0,r.jsx)(a.code,{children:"PersonajesRepository"}),", que sigue el patr\xf3n ",(0,r.jsx)(a.code,{children:"Singleton"})," que vimos en apartados anteriores."]}),(0,r.jsx)(a.h4,{id:"21-crear-un-personaje-con-un-arma",children:(0,r.jsx)(a.strong,{children:"2.1. Crear un Personaje con un Arma"})}),(0,r.jsx)(a.p,{children:"Para insertar un personaje con un arma embebida:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:"public void insertarPersonaje(Personaje personaje) {\n    personajesCollection.insertOne(personaje);\n}\n"})}),(0,r.jsx)(a.p,{children:"Ejemplo de uso del m\xe9todo:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="Main"',children:'// Dejamos que MongoDB autogenere los ids\nArma arma = new Arma("Espada Larga", "Una espada con filo brillante y equilibrada.");\nPersonaje personaje = new Personaje("Caballero oscuro", arma);\nPersonajesRepository.getInstance().insertarPersonaje(personaje);\n'})}),(0,r.jsx)(a.h4,{id:"22-leer-un-personaje-con-su-arma",children:(0,r.jsx)(a.strong,{children:"2.2. Leer un Personaje con su Arma"})}),(0,r.jsx)(a.p,{children:"Para consultar un personaje y su arma:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'// Recupera todos los personajes\npublic void obtenerPersonajes() {\n    try (MongoCursor<Personaje> cursor = personajesCollection.find().iterator()) {\n        System.out.println("Personajes encontrados:");\n        while (cursor.hasNext()) {\n            System.out.println(cursor.next());\n        }\n    }\n}\n\n// Recupera un solo personaje\npublic Personaje obtenerPersonaje(String nombre) {\n    Personaje personaje = personajesCollection.find(Filters.eq("nombre", nombre)).first();\n    if (personaje != null) {\n        System.out.println("Personaje encontrado: " + personaje);\n    } else {\n        System.out.println("No se encontr\xf3 el personaje con nombre: " + nombre);\n    }\n    return personaje;\n}\n'})}),(0,r.jsx)(a.h4,{id:"33-actualizar-el-arma-de-un-personaje",children:(0,r.jsx)(a.strong,{children:"3.3. Actualizar el Arma de un Personaje"})}),(0,r.jsx)(a.p,{children:"Para actualizar el arma embebida en un personaje, en primer lugar debemos recuperar el personaje que el usuario quiere actualizar. Si existe, actualizamos el valor del nombre del arma y guardamos la actualizaci\xf3n en base de datos."}),(0,r.jsx)(a.p,{children:"Recuerda que la relaci\xf3n la gestionamos nosotros, por lo que buscaremos el personaje con id indicado y le setteamos el arma."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void actualizarNombreArma(String nombrePersonaje, String nuevoNombreArma) {\n    Personaje personaje = obtenerPersonaje(nombrePersonaje);\n    if (personaje != null) {\n        // Recuperamos el arma y actualizamos el nombre\n        Arma arma = personaje.getArma();\n        arma.setNombre(nuevoNombreArma);\n        // Insertamos el cambio en BBDD\n        personajesCollection.updateOne(\n            Filters.eq("_id", personaje.getId()),\n            Updates.set("arma", arma)\n        );\n    }\n}\n'})}),(0,r.jsx)(a.h4,{id:"34-eliminar-un-personaje",children:(0,r.jsx)(a.strong,{children:"3.4. Eliminar un Personaje"})}),(0,r.jsx)(a.p,{children:"Para eliminar un personaje completo (incluido su arma):"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void eliminarPersonaje(String nombre) {\n    personajesCollection.deleteOne(Filters.eq("nombre", nombre));\n}\n'})}),(0,r.jsx)(a.hr,{}),(0,r.jsx)(a.h2,{id:"mapeo-de-la-relaci\xf3n-1n-bidireccional",children:"Mapeo de la relaci\xf3n 1:N bidireccional"}),(0,r.jsxs)(a.p,{children:["Vamos a modelar la relaci\xf3n ",(0,r.jsxs)(a.strong,{children:["Personaje - Habilidad (1",":N"," Bidireccional)"]})," y ver c\xf3mo realizar las operaciones CRUD. En este caso, un ",(0,r.jsx)(a.strong,{children:"Personaje"})," tiene una \xfanica habilidad asociada, y una ",(0,r.jsx)(a.strong,{children:"Habilidad"})," puede estar relacionada con varios personajes. Con fines did\xe1cticos, vamos a hacer esta relaci\xf3n bidirecional, es decir, utilizando referencias en ambas entidades, para que cada lado de la relaci\xf3n pueda acceder al otro."]}),(0,r.jsx)(a.p,{children:"En este caso:"}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Personaje"})," tiene un atributo ",(0,r.jsx)(a.code,{children:"habilidadId"})," que referencia a la habilidad asociada."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Habilidad"})," tiene un atributo ",(0,r.jsx)(a.code,{children:"personajesIds"})," que almacena una lista de IDs de los personajes que la poseen."]}),"\n"]}),(0,r.jsx)(a.h3,{id:"definir-los-pojos-1",children:"Definir los POJOs"}),(0,r.jsx)(a.h4,{id:"11-clase-habilidad",children:(0,r.jsx)(a.strong,{children:"1.1. Clase Habilidad"})}),(0,r.jsxs)(a.p,{children:["La clase ",(0,r.jsx)(a.code,{children:"Habilidad"})," representa la habilidad que puede estar asociada a uno o varios personajes:"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="model.Habilidad"',children:"public class Habilidad {\n    private ObjectId id;\n    private String nombre;\n    private String descripcion;\n    private List<ObjectId> personajesIds; // Referencia a los personajes que poseen esta habilidad\n\n    // Constructores (por defecto y parametrizado)\n    \n    // Getters y setters\n}\n"})}),(0,r.jsx)(a.h4,{id:"12-clase-personaje",children:(0,r.jsx)(a.strong,{children:"1.2. Clase Personaje"})}),(0,r.jsxs)(a.p,{children:["La clase ",(0,r.jsx)(a.code,{children:"Personaje"})," contiene un atributo ",(0,r.jsx)(a.code,{children:"habilidadId"})," que referencia a la habilidad asociada:"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="model.Personaje"',children:"public class Personaje {\n    private ObjectId id;\n    private String nombre;\n    private ObjectId habilidadId; // Referencia a la habilidad asociada\n\n    // Constructores (por defecto y parametrizado)\n    \n    // Getters y setters\n}\n"})}),(0,r.jsx)(a.h3,{id:"operaciones-crud-1",children:"Operaciones CRUD"}),(0,r.jsx)(a.h4,{id:"21-crear-un-personaje-con-su-habilidad",children:(0,r.jsx)(a.strong,{children:"2.1. Crear un Personaje con su Habilidad"})}),(0,r.jsx)(a.p,{children:"Para insertar un personaje con una habilidad referenciada, podemos recuperar la habilidad por medio del nombre. Una vez recuperada, debemos asociar la habilidad al personaje y actualizar la lista de personajes en la habilidad:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void insertarHabilidad(Habilidad habilidad) {\n    habilidadesCollection.insertOne(habilidad);\n}\n\n// Recupera una habilidad\npublic Habilidad obtenerHabilidad(String nombre) {\n    Habilidad habilidad = habilidadesCollection.find(Filters.eq("nombre", nombre)).first();\n    return habilidad;\n}\n\npublic void insertarPersonajeConHabilidad(Personaje personaje, String nombreHabilidad) {\n    Habilidad habilidad = obtenerHabilidad(nombreHabilidad);\n    if (habilidad != null) {\n        // Establecemos el id de la habilidad al personaje\n        personaje.setHabilidadId(habilidad.getId());\n\n        // Insertamos el personaje y recuperamos el id con el que se insert\xf3\n        InsertOneResult result = personajesCollection.insertOne(personaje);\n        BsonValue idPersonajeInsertado = result.getInsertedId();\n\n        // Actualizamos la lista de personajes en la habilidad asociada\n        habilidadesCollection.updateOne(\n            Filters.eq("_id", habilidad.getId()),\n            Updates.addToSet("personajesIds", idPersonajeInsertado)\n        );\n    } else {\n        // Insertamos el personaje\n        personajesCollection.insertOne(personaje);\n    }\n}\n'})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Ejemplo de uso:"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="Main"',children:'Habilidad nuevaHabilidad = new Habilidad("Fuerza Sobrehumana", "Incrementa la fuerza f\xedsica.");\nPersonajesRepository.getInstance().insertarHabilidad(nuevaHabilidad);\n\n// Crear un nuevo personaje\nArma arma = new Arma("Espada Larga", "Una espada con filo brillante y equilibrada.");\nPersonaje personaje = new Personaje("Caballero oscuro", arma);\n\n// Insertar el personaje con la habilidad reci\xe9n creada\nPersonajesRepository.getInstance().insertarPersonajeConHabilidad(personaje, "Fuerza Sobrehumana");\n'})}),(0,r.jsx)(a.h4,{id:"22-leer-un-personaje-con-su-habilidad",children:(0,r.jsx)(a.strong,{children:"2.2. Leer un Personaje con su Habilidad"})}),(0,r.jsx)(a.p,{children:"Para recuperar un personaje y su habilidad asociada, se consulta primero al personaje y luego se recupera la habilidad referenciada:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'// Recuperar un personaje con su habilidad\npublic void obtenerPersonajeConHabilidad(String nombrePersonaje) {\n    Personaje personaje = personajesCollection.find(Filters.eq("nombre", nombrePersonaje)).first();\n    if (personaje != null) {\n        Habilidad habilidad = habilidadesCollection.find(Filters.eq("_id", personaje.getHabilidadId())).first();\n        System.out.println("Personaje encontrado: " + personaje);\n        if (habilidad != null) {\n            System.out.println("Habilidad asociada: " + habilidad);\n        }\n    } else {\n        System.out.println("No se encontr\xf3 el personaje con nombre: " + nombrePersonaje);\n    }\n}\n'})}),(0,r.jsx)(a.h4,{id:"23-actualizar-la-habilidad-de-un-personaje",children:(0,r.jsx)(a.strong,{children:"2.3. Actualizar la Habilidad de un Personaje"})}),(0,r.jsx)(a.p,{children:"Si queremos actualizar la habilidad de un personaje, debemos:"}),(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsx)(a.li,{children:"Remover al personaje de la lista de personajes en la habilidad anterior."}),"\n",(0,r.jsx)(a.li,{children:"Asignar la nueva habilidad al personaje."}),"\n",(0,r.jsx)(a.li,{children:"A\xf1adir al personaje a la lista de personajes en la nueva habilidad."}),"\n"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void actualizarHabilidadPersonaje(String nombrePersonaje, ObjectId nuevaHabilidadId) {\n    // Recuperar el personaje\n    Personaje personaje = personajesCollection.find(Filters.eq("nombre", nombrePersonaje)).first();\n    if (personaje != null) {\n        // Eliminar el personaje de la lista de la habilidad anterior\n        habilidadesCollection.updateOne(\n            Filters.eq("_id", personaje.getHabilidadId()),\n            Updates.pull("personajesIds", personaje.getId())\n        );\n\n        // Actualizar la habilidad del personaje\n        personajesCollection.updateOne(\n            Filters.eq("_id", personaje.getId()),\n            Updates.set("habilidadId", nuevaHabilidadId)\n        );\n\n        // A\xf1adir el personaje a la nueva habilidad\n        habilidadesCollection.updateOne(\n            Filters.eq("_id", nuevaHabilidadId),\n            Updates.addToSet("personajesIds", personaje.getId())\n        );\n    } else {\n        System.out.println("No se encontr\xf3 el personaje con nombre: " + nombrePersonaje);\n    }\n}\n'})}),(0,r.jsx)(a.h4,{id:"24-eliminar-un-personaje-y-su-referencia-en-habilidad",children:(0,r.jsx)(a.strong,{children:"2.4. Eliminar un Personaje y su Referencia en Habilidad"})}),(0,r.jsx)(a.p,{children:"Para eliminar un personaje, debemos remover su referencia de la lista de personajes en la habilidad correspondiente:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void eliminarPersonajeConHabilidad(String nombrePersonaje) {\n    // Recuperar el personaje\n    Personaje personaje = personajesCollection.find(Filters.eq("nombre", nombrePersonaje)).first();\n    if (personaje != null) {\n        // Eliminar el personaje de la lista en la habilidad\n        habilidadesCollection.updateOne(\n            Filters.eq("_id", personaje.getHabilidadId()),\n            Updates.pull("personajesIds", personaje.getId())\n        );\n\n        // Eliminar el personaje\n        personajesCollection.deleteOne(Filters.eq("_id", personaje.getId()));\n        System.out.println("Personaje eliminado con \xe9xito.");\n    } else {\n        System.out.println("No se encontr\xf3 el personaje con nombre: " + nombrePersonaje);\n    }\n}\n'})}),(0,r.jsx)(a.hr,{}),(0,r.jsx)(a.h2,{id:"mapeo-de-la-relaci\xf3n-nm",children:"Mapeo de la relaci\xf3n N:M"}),(0,r.jsxs)(a.p,{children:["En esta relaci\xf3n, un ",(0,r.jsx)(a.strong,{children:"Personaje"})," puede tener varias ",(0,r.jsx)(a.strong,{children:"Debilidades"})," y una ",(0,r.jsx)(a.strong,{children:"Debilidad"})," la pueden tener varios ",(0,r.jsx)(a.strong,{children:"Personajes"}),". No obstante, esta relaci\xf3n no la haremos bidireccional, es decir, las ",(0,r.jsx)(a.strong,{children:"Debilidades"})," no almacenan informaci\xf3n sobre los personajes que las tienen. Esto simplifica la estructura de las colecciones, ya que \xfanicamente el ",(0,r.jsx)(a.strong,{children:"Personaje"})," mantiene una lista de referencias a sus debilidades."]}),(0,r.jsx)(a.p,{children:"En este caso:"}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Personaje"})," tiene un atributo ",(0,r.jsx)(a.code,{children:"debilidadesIds"}),", que es una lista de referencias a las debilidades asociadas."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Debilidad"})," no tiene un atributo relacionado con los personajes."]}),"\n"]}),(0,r.jsx)(a.h3,{id:"definir-los-pojos-2",children:"Definir los POJOs"}),(0,r.jsx)(a.h4,{id:"11-clase-debilidad",children:(0,r.jsx)(a.strong,{children:"1.1. Clase Debilidad"})}),(0,r.jsxs)(a.p,{children:["La clase ",(0,r.jsx)(a.code,{children:"Debilidad"})," representa las debilidades que pueden estar asociadas a uno o m\xe1s personajes, pero no tienen informaci\xf3n de ellos:"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="model.Debilidad"',children:"public class Debilidad {\n    private ObjectId id;\n    private String nombre;\n    private String descripcion;\n\n    // Constructores (por defecto y parametrizado)\n    \n    // Getters y setters\n}\n"})}),(0,r.jsx)(a.h4,{id:"12-clase-personaje-1",children:(0,r.jsx)(a.strong,{children:"1.2. Clase Personaje"})}),(0,r.jsxs)(a.p,{children:["La clase ",(0,r.jsx)(a.code,{children:"Personaje"})," contiene un atributo ",(0,r.jsx)(a.code,{children:"debilidadesIds"})," que referencia a las debilidades asociadas:"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="model.Personaje"',children:"import java.util.List;\n\npublic class Personaje {\n    private ObjectId id;\n    private String nombre;\n    private Arma arma; // Relaci\xf3n 1:1 embebida\n    private ObjectId habilidadId; // Referencia a la habilidad asociada\n    private List<ObjectId> debilidadesIds; // Lista de referencias a las debilidades asociadas\n\n    // Constructores (por defecto y parametrizado)\n    \n    // Getters y setters\n}\n"})}),(0,r.jsx)(a.hr,{}),(0,r.jsx)(a.h3,{id:"operaciones-crud-2",children:"Operaciones CRUD"}),(0,r.jsx)(a.h4,{id:"21-asociar-debilidades-a-un-personaje",children:(0,r.jsx)(a.strong,{children:"2.1. Asociar Debilidades a un Personaje"})}),(0,r.jsx)(a.p,{children:"Para asociar una o m\xe1s debilidades a un personaje:"}),(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:["Actualizamos la lista de ",(0,r.jsx)(a.code,{children:"debilidadesIds"})," en el personaje."]}),"\n",(0,r.jsxs)(a.li,{children:["No se realiza ning\xfan cambio en la colecci\xf3n de ",(0,r.jsx)(a.strong,{children:"Debilidades"}),", ya que la relaci\xf3n no es bidireccional."]}),"\n"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'// Recupera una debilidad\npublic Debilidad obtenerDebilidad(String nombre) {\n    return debilidadesCollection.find(Filters.eq("nombre", nombre)).first();\n}\n\npublic void asociarDebilidadesAPersonaje(String nombrePersonaje, List<String> nombresDebilidades) {\n    // Recuperar el personaje\n    Personaje personaje = obtenerPersonaje(nombrePersonaje);\n    if (personaje != null) {\n        for (String nombreDebilidad : nombresDebilidades) {\n            // Recuperar la debilidad\n            Debilidad debilidad = obtenerDebilidad(nombreDebilidad);\n            if (debilidad != null) {\n                // Agregar la referencia de la debilidad al personaje\n                personajesCollection.updateOne(\n                    Filters.eq("_id", personaje.getId()),\n                    Updates.addToSet("debilidadesIds", debilidad.getId())\n                );\n            } else {\n                System.out.println("No se encontr\xf3 la debilidad con nombre: " + nombreDebilidad);\n            }\n        }\n        System.out.println("Debilidades asociadas al personaje con \xe9xito.");\n    } else {\n        System.out.println("No se encontr\xf3 el personaje con nombre: " + nombrePersonaje);\n    }\n}\n'})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Ejemplo de uso:"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="Main"',children:'// Asociar debilidades a un personaje\nList<String> nombresDebilidades = List.of("Fobia al fuego", "Miedo a las alturas");\nPersonajesRepository.getInstance().asociarDebilidadesAPersonaje("Caballero oscuro", nombresDebilidades);\n'})}),(0,r.jsx)(a.h4,{id:"22-leer-un-personaje-con-sus-debilidades",children:(0,r.jsx)(a.strong,{children:"2.2. Leer un Personaje con sus Debilidades"})}),(0,r.jsx)(a.p,{children:"Para recuperar un personaje junto con sus debilidades, se realiza lo siguiente:"}),(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsx)(a.li,{children:"Consultar el personaje."}),"\n",(0,r.jsxs)(a.li,{children:["Recuperar todas las debilidades referenciadas en su lista ",(0,r.jsx)(a.code,{children:"debilidadesIds"}),"."]}),"\n"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void obtenerPersonajeConDebilidades(String nombrePersonaje) {\n    Personaje personaje = personajesCollection.find(Filters.eq("nombre", nombrePersonaje)).first();\n    if (personaje != null) {\n        System.out.println("Personaje encontrado: " + personaje);\n        List<ObjectId> debilidadesIds = personaje.getDebilidadesIds();\n        for (ObjectId debilidadId : debilidadesIds) {\n            Debilidad debilidad = debilidadesCollection.find(Filters.eq("_id", debilidadId)).first();\n            if (debilidad != null) {\n                System.out.println("Debilidad: " + debilidad);\n            }\n        }\n    } else {\n        System.out.println("No se encontr\xf3 el personaje con nombre: " + nombrePersonaje);\n    }\n}\n'})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Ejemplo de uso:"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="Main"',children:'// Consultar un personaje con sus debilidades\nPersonajesRepository.getInstance().obtenerPersonajeConDebilidades("Caballero oscuro");\n'})}),(0,r.jsx)(a.h4,{id:"23-desasociar-una-debilidad-de-un-personaje",children:(0,r.jsx)(a.strong,{children:"2.3. Desasociar una Debilidad de un Personaje"})}),(0,r.jsxs)(a.p,{children:["Para desasociar una debilidad de un personaje, simplemente eliminamos la referencia de la debilidad en la lista ",(0,r.jsx)(a.code,{children:"debilidadesIds"})," del personaje."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void desasociarDebilidadDePersonaje(String nombrePersonaje, String nombreDebilidad) {\n    // Recuperar el personaje\n    Personaje personaje = obtenerPersonaje(nombrePersonaje);\n    if (personaje != null) {\n        // Recuperar la debilidad\n        Debilidad debilidad = debilidadesCollection.find(Filters.eq("nombre", nombreDebilidad)).first();\n        if (debilidad != null) {\n            // Eliminar la referencia de la debilidad en el personaje\n            personajesCollection.updateOne(\n                Filters.eq("_id", personaje.getId()),\n                Updates.pull("debilidadesIds", debilidad.getId())\n            );\n            System.out.println("Debilidad desasociada del personaje con \xe9xito.");\n        } else {\n            System.out.println("No se encontr\xf3 la debilidad con nombre: " + nombreDebilidad);\n        }\n    } else {\n        System.out.println("No se encontr\xf3 el personaje con nombre: " + nombrePersonaje);\n    }\n}\n'})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Ejemplo de uso:"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="Main"',children:'// Desasociar una debilidad de un personaje\nPersonajesRepository.getInstance().desasociarDebilidadDePersonaje("Caballero oscuro", "Fobia al fuego");\n'})}),(0,r.jsx)(a.h4,{id:"24-eliminar-un-personaje",children:(0,r.jsx)(a.strong,{children:"2.4. Eliminar un Personaje"})}),(0,r.jsx)(a.p,{children:"Para eliminar un personaje, no es necesario realizar cambios en la colecci\xf3n de debilidades, ya que no almacenan informaci\xf3n sobre los personajes."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="database.PersonajesRepository"',children:'public void eliminarPersonaje(String nombrePersonaje) {\n    // Eliminar el personaje\n    personajesCollection.deleteOne(Filters.eq("nombre", nombrePersonaje));\n    System.out.println("Personaje eliminado con \xe9xito.");\n}\n'})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Ejemplo de uso:"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",metastring:'title="Main"',children:'// Eliminar un personaje\nPersonajesRepository.getInstance().eliminarPersonaje("Caballero oscuro");\n'})}),(0,r.jsx)(a.h2,{id:"ejercicio",children:"Ejercicio"}),(0,r.jsx)(a.p,{children:"Implementa el ejercicio de las Misiones utilizando MongoDB como base de datos. Recuerda que en el apartado anterior, Dise\xf1o documental, analizamos qu\xe9 colecciones deb\xedamos crear y c\xf3mo \xedbamos a gestionar las relaciones."}),(0,r.jsxs)(a.p,{children:["Puedes descargar el enunciado en este ",(0,r.jsx)(a.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(68274).A+"",children:"enlace"}),"."]})]})}function j(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);