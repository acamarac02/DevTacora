"use strict";(self.webpackChunkpmdm=self.webpackChunkpmdm||[]).push([[163],{4758:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"pmdm_2526/ut1_programacion_movil/ciclo-vida","title":"Ciclo de vida de una aplicaci\xf3n","description":"Explicaci\xf3n del ciclo de vida de una Activity en Android, sus m\xe9todos principales y c\xf3mo mantener el estado de la aplicaci\xf3n.","source":"@site/docs/01_pmdm_2526/ut1_programacion_movil/4-ciclo-vida.md","sourceDirName":"01_pmdm_2526/ut1_programacion_movil","slug":"/pmdm_2526/ut1_programacion_movil/ciclo-vida","permalink":"/DevTacora/docs/pmdm_2526/ut1_programacion_movil/ciclo-vida","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Ciclo de vida de una aplicaci\xf3n","sidebar_position":4,"description":"Explicaci\xf3n del ciclo de vida de una Activity en Android, sus m\xe9todos principales y c\xf3mo mantener el estado de la aplicaci\xf3n.","keywords":["Android","Ciclo de vida","Activity","onCreate","onSaveInstanceState"]},"sidebar":"pmdm_2526_Sidebar","previous":{"title":"Aplicaci\xf3n b\xe1sica","permalink":"/DevTacora/docs/pmdm_2526/ut1_programacion_movil/aplicacion-basica"}}');var o=n(4848),r=n(8453);const s={title:"Ciclo de vida de una aplicaci\xf3n",sidebar_position:4,description:"Explicaci\xf3n del ciclo de vida de una Activity en Android, sus m\xe9todos principales y c\xf3mo mantener el estado de la aplicaci\xf3n.",keywords:["Android","Ciclo de vida","Activity","onCreate","onSaveInstanceState"]},t="Ciclo de vida de una aplicaci\xf3n",d={},c=[{value:"Ciclo de vida",id:"ciclo-de-vida",level:2},{value:"M\xe9todos principales",id:"m\xe9todos-principales",level:3},{value:"Mantener el estado",id:"mantener-el-estado",level:2},{value:"Guardar el estado",id:"guardar-el-estado",level:3},{value:"Recuperar el estado",id:"recuperar-el-estado",level:3},{value:"Aplicaci\xf3n contador",id:"aplicaci\xf3n-contador",level:2}];function l(e){const a={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)("div",{class:"justify-text",children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"ciclo-de-vida-de-una-aplicaci\xf3n",children:"Ciclo de vida de una aplicaci\xf3n"})}),(0,o.jsxs)(a.p,{children:["En esta unidad vamos a estudiar el ",(0,o.jsx)(a.strong,{children:"ciclo de vida de una Activity"})," en Android. Comprenderlo es fundamental, ya que determina c\xf3mo se comporta una aplicaci\xf3n cuando el usuario entra, sale o la vuelve a abrir. Tambi\xe9n veremos c\xf3mo ",(0,o.jsx)(a.strong,{children:"mantener el estado"})," de una actividad para no perder informaci\xf3n importante."]}),(0,o.jsx)(a.h2,{id:"ciclo-de-vida",children:"Ciclo de vida"}),(0,o.jsxs)(a.p,{children:["Cuando un usuario navega por tu aplicaci\xf3n, la cierra y despu\xe9s vuelve a entrar, la instancia de la ",(0,o.jsx)(a.code,{children:"Activity"})," pasa por diferentes ",(0,o.jsx)(a.strong,{children:"estados del ciclo de vida"}),".",(0,o.jsx)(a.br,{}),"\n","La clase ",(0,o.jsx)(a.code,{children:"Activity"})," proporciona una serie de ",(0,o.jsx)(a.strong,{children:"m\xe9todos de callback"})," que notifican cuando ocurre un cambio de estado: creaci\xf3n, pausa, reanudaci\xf3n o destrucci\xf3n de la actividad."]}),(0,o.jsxs)(a.p,{children:["Estos m\xe9todos permiten definir ",(0,o.jsx)(a.strong,{children:"c\xf3mo debe comportarse la Activity"})," en cada situaci\xf3n. Por ejemplo, en un reproductor de v\xeddeo podemos pausar el v\xeddeo y cerrar la conexi\xf3n cuando el usuario cambia de aplicaci\xf3n; Si el usuario vuelve, restablecemos la conexi\xf3n y reanudamos la reproducci\xf3n."]}),(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"Diagrama ciclo de vida",src:n(8544).A+"",width:"513",height:"663"})}),(0,o.jsx)(a.h3,{id:"m\xe9todos-principales",children:"M\xe9todos principales"}),(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onCreate()"})})," \u2192 se llama al crear la actividad. Aqu\xed inicializamos los elementos b\xe1sicos, como la interfaz (",(0,o.jsx)(a.code,{children:"setContentView"}),") o variables de estado."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onStart()"})})," \u2192 la actividad empieza a prepararse para ser visible y entrar en primer plano. En este punto, la actividad ",(0,o.jsx)(a.strong,{children:"ya es visible para el usuario, pero a\xfan no tiene el foco para interactuar"}),"."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onResume()"})})," \u2192 la actividad ya est\xe1 en pantalla y tiene el foco del usuario. Permanece en este estado hasta que otra app o actividad la interrumpe."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onPause()"})})," \u2192 se ejecuta cuando el usuario abandona la actividad. En este punto la actividad pierde el foco, pero a\xfan es parcialmente visible (otra ventana encima, un di\xe1logo, etc.) Es el lugar indicado para ",(0,o.jsx)(a.strong,{children:"guardar datos temporales"})," o detener animaciones. Debe ser r\xe1pido, ya que hasta que no termine no se inicia la siguiente actividad."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onStop()"})})," \u2192 la actividad deja de ser visible. Aqu\xed se pueden realizar ",(0,o.jsx)(a.strong,{children:"tareas de cierre m\xe1s pesadas"}),", como guardar en base de datos."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onDestroy()"})})," \u2192 se llama justo antes de que la actividad sea destruida, ya sea porque el usuario cerr\xf3 la app o porque el sistema necesita liberar memoria."]}),"\n"]}),(0,o.jsx)(a.admonition,{type:"tip",children:(0,o.jsxs)(a.p,{children:["La clave est\xe1 en saber ",(0,o.jsx)(a.strong,{children:"qu\xe9 guardar en cada fase"}),". Operaciones r\xe1pidas en ",(0,o.jsx)(a.code,{children:"onPause()"}),", y las m\xe1s costosas (como acceso a base de datos) en ",(0,o.jsx)(a.code,{children:"onStop()"}),"."]})}),(0,o.jsx)(a.admonition,{title:"EJERCICIO",type:"info",children:(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.p,{children:"Crea una aplicaci\xf3n nueva y observa los estados que atraviesa la Activity cuando:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Cierras la aplicaci\xf3n."}),"\n",(0,o.jsx)(a.li,{children:"Bloqueas el m\xf3vil."}),"\n",(0,o.jsx)(a.li,{children:"Giras el dispositivo."}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Puedes usar Logcat para analizar los estados por los que pasa."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",metastring:'title="MainActivity.java"',children:' @Override\n protected void onCreate(Bundle savedInstanceState) {\n     super.onCreate(savedInstanceState);\n     setContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot());\n\n     Log.d("MainActivity", "Paso por onCreate");\n }\n\n @Override\n protected void onResume() {\n     super.onResume();\n     Log.d("MainActivity", "Paso por onResume");\n }\n'})}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Repite la prueba con la aplicaci\xf3n ",(0,o.jsx)(a.strong,{children:"Contador"})," de la unidad anterior. Reflexiona: ",(0,o.jsx)(a.strong,{children:"\xbfqu\xe9 ocurre con el valor del contador?"})]}),"\n"]}),"\n"]})}),(0,o.jsx)(a.hr,{}),(0,o.jsx)(a.h2,{id:"mantener-el-estado",children:"Mantener el estado"}),(0,o.jsxs)(a.p,{children:["Como hemos visto, cuando una actividad se pausa o se detiene, su estado suele conservarse porque la instancia sigue en memoria. Sin embargo, el sistema puede ",(0,o.jsx)(a.strong,{children:"destruir una Activity"})," en segundo plano para liberar recursos. En ese caso, al volver a abrirla, el sistema debe ",(0,o.jsx)(a.strong,{children:"crear una nueva instancia"}),", volviendo a inicializarse todas las variables."]}),(0,o.jsxs)(a.p,{children:["Para que el usuario no pierda su informaci\xf3n, debemos implementar mecanismos para ",(0,o.jsx)(a.strong,{children:"guardar y restaurar el estado"}),"."]}),(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"Callbacks de estado",src:n(2763).A+"",width:"2038",height:"666"})}),(0,o.jsx)(a.h3,{id:"guardar-el-estado",children:"Guardar el estado"}),(0,o.jsxs)(a.p,{children:["Se realiza con el m\xe9todo ",(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onSaveInstanceState(Bundle outState)"})}),".",(0,o.jsx)(a.br,{}),"\n","Podemos a\xf1adir al ",(0,o.jsx)(a.code,{children:"Bundle"})," pares ",(0,o.jsx)(a.strong,{children:"clave-valor"})," con la informaci\xf3n que queramos conservar (texto, n\xfameros, booleanos, etc.)."]}),(0,o.jsx)(a.p,{children:"Ejemplo:"}),(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",children:'@Override\nprotected void onSaveInstanceState(Bundle outState) {\n    outState.putInt("contador", contador);\n    super.onSaveInstanceState(outState);\n}\n'})}),(0,o.jsx)(a.h3,{id:"recuperar-el-estado",children:"Recuperar el estado"}),(0,o.jsx)(a.p,{children:"El estado guardado se recupera en dos posibles callbacks:"}),(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onCreate(Bundle savedInstanceState)"})})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.strong,{children:(0,o.jsx)(a.code,{children:"onRestoreInstanceState(Bundle savedInstanceState)"})})}),"\n"]}),(0,o.jsxs)(a.p,{children:["Ambos reciben el ",(0,o.jsx)(a.code,{children:"Bundle"})," con la informaci\xf3n guardada. Por comodidad, lo recuperaremos en ",(0,o.jsx)(a.code,{children:"onCreate"}),". No obstante, en ambos casos es importante comprobar si ",(0,o.jsx)(a.code,{children:"savedInstanceState"})," es ",(0,o.jsx)(a.strong,{children:"nulo"}),", ya que:"]}),(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Si ",(0,o.jsx)(a.strong,{children:"es nulo"}),", significa que la Activity se est\xe1 creando desde cero."]}),"\n",(0,o.jsxs)(a.li,{children:["Si ",(0,o.jsx)(a.strong,{children:"no es nulo"}),", se est\xe1 recreando con datos previamente guardados."]}),"\n"]}),(0,o.jsx)(a.p,{children:"Ejemplo:"}),(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",children:'@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    if (savedInstanceState != null) {\n        contador = savedInstanceState.getInt("contador");\n    } else {\n        // Aqu\xed puedes inicializarlo al valor por defecto\n        contador = 0;\n    }\n}\n'})}),(0,o.jsx)(a.p,{children:"De esta manera, al rotar la pantalla o reabrir la app tras ser destruida, el valor del contador (o cualquier otra informaci\xf3n relevante) se conserva."}),(0,o.jsx)(a.h2,{id:"aplicaci\xf3n-contador",children:"Aplicaci\xf3n contador"}),(0,o.jsx)(a.p,{children:"Para que nuestra aplicaci\xf3n contadora, desarrollada en el apartado anterior, conserve el valor del contador al producirse cambios en el ciclo de vida (por ejemplo, al girar la pantalla), podemos modificarla de la siguiente manera:"}),(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-java",metastring:'title="MainActivity.java"',children:'public class MainActivity extends AppCompatActivity {\n\n    // Variable que sirve como enlace\n    private ActivityMainBinding binding;\n\n    // Constante para evitar errores al escribir\n    private final static String ESTADO_CONTADOR = "contador";\n\n    private int contador = 0;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot());\n\n        if (savedInstanceState != null) {\n            // Recuperamos el valor de contador\n            contador = savedInstanceState.getInt(ESTADO_CONTADOR);\n        }\n\n        binding.btnContador.setOnClickListener(v -> incrementarContador(v));\n    }\n\n    private void incrementarContador(View v) {\n        // Actualizamos el valor del contador\n        contador++;\n        // Actualizamos el texto que muestra la cuenta\n        binding.textoContador.setText("Has clickado " + contador + " veces");\n    }\n\n    @Override\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\n        super.onSaveInstanceState(outState);\n        // Guardamos el valor de contador\n        outState.putInt(ESTADO_CONTADOR, contador);\n    }\n}\n'})}),(0,o.jsx)(a.admonition,{title:"CUIDADO",type:"warning",children:(0,o.jsx)(a.p,{children:"Copia este c\xf3digo y comprueba su funcionamiento. Si giras el dispositivo, \xbfqu\xe9 sucede con el texto del contador? Reflexiona: \xbfqu\xe9 falta para que funcione de manera correcta?"})}),(0,o.jsx)(a.admonition,{title:"ACTIVIDAD DE SEGUIMIENTO",type:"info",children:(0,o.jsxs)(a.p,{children:["Realiza la ",(0,o.jsx)(a.strong,{children:"Actividad de Seguimiento 1: Dungeons and Dados"}),"."]})})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},2763:(e,a,n)=>{n.d(a,{A:()=>i});const i=n.p+"assets/images/callbacks-estado-7fe8b33f86da6888d81edafbec48f2ed.png"},8544:(e,a,n)=>{n.d(a,{A:()=>i});const i=n.p+"assets/images/diagrama-ciclo-vida-e9002f7ee122cb5048448c4020e4f128.png"},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>t});var i=n(6540);const o={},r=i.createContext(o);function s(e){const a=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:a},e.children)}}}]);