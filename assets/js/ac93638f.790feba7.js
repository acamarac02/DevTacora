"use strict";(self.webpackChunkpmdm=self.webpackChunkpmdm||[]).push([[7644],{2568:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"pmdm_2526/ut5_persistencia/supabase-storage/demo","title":"Demo Anuncios con Im\xe1genes","description":"En este ejemplo, partimos del Tabl\xf3n de Anuncios implementado con Firestore. En TablonFragment hemos a\xf1adido un bot\xf3n para subir la imagen del anuncio. Hasta que no se ha subido una imagen, no se podr\xe1 publicar el anuncio ya que se deshabilita el bot\xf3n de Publicar.","source":"@site/docs/01_pmdm_2526/ut5_persistencia/5-supabase-storage/4-demo.md","sourceDirName":"01_pmdm_2526/ut5_persistencia/5-supabase-storage","slug":"/pmdm_2526/ut5_persistencia/supabase-storage/demo","permalink":"/DevTacora/docs/pmdm_2526/ut5_persistencia/supabase-storage/demo","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Demo Anuncios con Im\xe1genes","title":"Demo Anuncios con Im\xe1genes"},"sidebar":"pmdm_2526_Sidebar","previous":{"title":"Integraci\xf3n en Android","permalink":"/DevTacora/docs/pmdm_2526/ut5_persistencia/supabase-storage/integracion-android"}}');var o=a(4848),r=a(8453);const t={sidebar_position:4,sidebar_label:"Demo Anuncios con Im\xe1genes",title:"Demo Anuncios con Im\xe1genes"},s=void 0,l={},d=[{value:"1. Configurar las dependencias del proyecto",id:"1-configurar-las-dependencias-del-proyecto",level:2},{value:"2. Modificar los Layouts",id:"2-modificar-los-layouts",level:2},{value:"2.1. Layout de <code>TablonFragment</code>",id:"21-layout-de-tablonfragment",level:3},{value:"2.2. Layout de <code>AnuncioViewHolder</code>",id:"22-layout-de-anuncioviewholder",level:3},{value:"3. Modificar el modelo de datos",id:"3-modificar-el-modelo-de-datos",level:2},{value:"4. Implementar el acceso a datos",id:"4-implementar-el-acceso-a-datos",level:2},{value:"4.1. Cliente de Retrofit",id:"41-cliente-de-retrofit",level:3},{value:"4.2. Interfaz con las operaciones",id:"42-interfaz-con-las-operaciones",level:3},{value:"4.3. Repositorio de datos",id:"43-repositorio-de-datos",level:3},{value:"4.4. ViewModel",id:"44-viewmodel",level:3},{value:"\ud83d\udd39 <strong>Problema: Dependencia entre las dos operaciones</strong>",id:"-problema-dependencia-entre-las-dos-operaciones",level:4},{value:"\ud83d\udd39 <strong>\xbfQu\xe9 es <code>Transformations.switchMap</code>?</strong>",id:"-qu\xe9-es-transformationsswitchmap",level:4},{value:"\xbfPor qu\xe9 usar <code>switchMap</code> en lugar de un simple <code>Observer</code>?",id:"por-qu\xe9-usar-switchmap-en-lugar-de-un-simple-observer",level:4},{value:"5. Adaptar el c\xf3digo de <code>TablonFragment</code>",id:"5-adaptar-el-c\xf3digo-de-tablonfragment",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)("div",{class:"justify-text",children:[(0,o.jsxs)(n.p,{children:["En este ejemplo, partimos del ",(0,o.jsx)(n.strong,{children:"Tabl\xf3n de Anuncios"})," implementado con Firestore. En ",(0,o.jsx)(n.code,{children:"TablonFragment"})," hemos a\xf1adido un bot\xf3n para subir la imagen del anuncio. Hasta que no se ha subido una imagen, no se podr\xe1 publicar el anuncio ya que se deshabilita el bot\xf3n de Publicar."]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"UT5. GIF resumen de la aplicaci\xf3n",src:a(4262).A+"",width:"420",height:"898"})}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Estructura del proyecto:"})}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"LoginActivity"})})," \u2192 Maneja el inicio de sesi\xf3n con Firebase Authentication."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"MainActivity"})})," \u2192 Contiene el ",(0,o.jsx)(n.code,{children:"TablonFragment"}),", donde se muestran los anuncios."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"TablonFragment"})})," \u2192 Muestra los anuncios en un ",(0,o.jsx)(n.code,{children:"RecyclerView"})," y permite agregar nuevos anuncios."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"AnuncioViewModel"})})," \u2192 Gestiona los datos entre la UI y Firestore."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"AnuncioRepository"})})," \u2192 Se encarga de la conexi\xf3n con Firestore y la API de Supabase."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"SupabaseClient"})})," \u2192 Cliente de Retrofit para gestionar la comunicaci\xf3n con Supabase."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"SupabaseStorageAPI"})}),"  \u2192 Interfaz que implementa los m\xe9todos para enviar peticiones a Supabase."]}),"\n"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Diagrama de secuencia"})," que ilustra el flujo de llamadas entre las clases para publicar un anuncio con imagen:"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"alt text",src:a(7058).A+"",width:"3249",height:"1968"})}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h2,{id:"1-configurar-las-dependencias-del-proyecto",children:"1. Configurar las dependencias del proyecto"}),(0,o.jsxs)(n.p,{children:["Revisa el apartado ",(0,o.jsx)(n.code,{children:"Configuraci\xf3n Inicial de Supabase"})," y a\xf1ade las dependencias necesarias para utilizar Supabase Storage."]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h2,{id:"2-modificar-los-layouts",children:"2. Modificar los Layouts"}),(0,o.jsxs)(n.h3,{id:"21-layout-de-tablonfragment",children:["2.1. Layout de ",(0,o.jsx)(n.code,{children:"TablonFragment"})]}),(0,o.jsx)(n.p,{children:"En el layout vamos a a\xf1adir un bot\xf3n para subir las im\xe1genes y vamos a poner el bot\xf3n Publicar deshabilitado por defecto. Lo habilitaremos cuando se suba una imagen para el anuncio."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",metastring:'title="fragment_tablon.xml"',children:'<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:orientation="vertical"\n    android:padding="16dp">\n\n    <EditText\n        android:id="@+id/etAnuncio"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:hint="Escribe un anuncio..." />\n\n    \x3c!-- Bot\xf3n nuevo --\x3e\n    <Button\n        android:id="@+id/btnSubirImagen"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:text="Subir imagen" />\n\n    <Button\n        android:id="@+id/btnPublicar"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:enabled="false"\n        android:text="Publicar" />\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id="@+id/recyclerAnuncios"\n        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent" />\n</LinearLayout>\n'})}),(0,o.jsxs)(n.h3,{id:"22-layout-de-anuncioviewholder",children:["2.2. Layout de ",(0,o.jsx)(n.code,{children:"AnuncioViewHolder"})]}),(0,o.jsx)(n.p,{children:"Modificamos el ViewHolder para mostrar la imagen asociada al anuncio."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",metastring:'title="viewholder_anuncio.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:layout_margin="8dp"\n    app:cardCornerRadius="8dp"\n    app:cardElevation="4dp">\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="horizontal"\n        android:padding="16dp">\n\n        \x3c!-- Imagen del anuncio --\x3e\n        <ImageView\n            android:id="@+id/ivImagenNoticia"\n            android:layout_width="80dp"\n            android:layout_height="80dp"\n            android:scaleType="centerCrop"\n            android:src="@drawable/ic_launcher_background"\n            android:layout_marginEnd="12dp"\n            android:contentDescription="Imagen de la noticia" />\n\n        \x3c!-- Contenedor del contenido de la noticia --\x3e\n        <LinearLayout\n            android:layout_width="0dp"\n            android:layout_height="wrap_content"\n            android:orientation="vertical"\n            android:layout_weight="1">\n\n            \x3c!-- Contenido del anuncio --\x3e\n            <TextView\n                android:id="@+id/tvContenido"\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:text="Contenido"\n                android:textStyle="bold"\n                android:textSize="16sp"\n                android:textColor="@android:color/black" />\n\n            \x3c!-- Fecha del anuncio --\x3e\n            <TextView\n                android:id="@+id/tvFecha"\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:text="Fecha"\n                android:textSize="14sp"\n                android:textColor="@android:color/darker_gray"\n                android:layout_marginTop="4dp" />\n\n            \x3c!-- Nombre del usuario --\x3e\n            <TextView\n                android:id="@+id/tvUsuario"\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:text="Usuario"\n                android:textSize="14sp"\n                android:textColor="@android:color/darker_gray"\n                android:layout_marginTop="4dp" />\n\n        </LinearLayout>\n    </LinearLayout>\n</androidx.cardview.widget.CardView>\n'})}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h2,{id:"3-modificar-el-modelo-de-datos",children:"3. Modificar el modelo de datos"}),(0,o.jsx)(n.p,{children:"Nuestro anuncio ahora debe almacenar la URL de la imagen en Supabase."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'title="model/Anuncio.java"',children:"public class Anuncio {\n    private String id;\n    private String contenido;\n    private long fecha;\n    private String emailAutor;\n    private String urlImagen; // Atributo nuevo\n\n    // Constructor vac\xedo requerido por Firestore\n    public Anuncio() {}\n\n    // Getters y setters\n}\n"})}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h2,{id:"4-implementar-el-acceso-a-datos",children:"4. Implementar el acceso a datos"}),(0,o.jsx)(n.p,{children:"Recuerda que Supabase ofrece una API para comunicarnos con los servicios, de manera que tenemos que utilizar Retrofit para establecer la comunicaci\xf3n."}),(0,o.jsx)(n.h3,{id:"41-cliente-de-retrofit",children:"4.1. Cliente de Retrofit"}),(0,o.jsxs)(n.p,{children:["En esta clase establecemos la conexi\xf3n entre Retrofit y el servicio de Supabase. Recuerda que en el apartado ",(0,o.jsx)(n.code,{children:"Configuraci\xf3n Inicial"})," puedes ver d\xf3nde obtener la URL base y API key de Supabase."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'title="supabase/SupabaseClient.java"',children:'import retrofit2.Retrofit;\nimport retrofit2.converter.gson.GsonConverterFactory;\n\npublic class SupabaseClient {\n\n    private static Retrofit retrofit = null;\n    private static final String BASE_URL = "https://<TU_URL_BASE>.supabase.co/";\n\n    public static Retrofit getClient() {\n        if (retrofit == null) {\n            retrofit = new Retrofit.Builder()\n                    .baseUrl(BASE_URL)\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .build();\n        }\n        return retrofit;\n    }\n}\n'})}),(0,o.jsx)(n.h3,{id:"42-interfaz-con-las-operaciones",children:"4.2. Interfaz con las operaciones"}),(0,o.jsxs)(n.p,{children:["Siguiendo la arquitectura de Retrofit, debemos implementar una ",(0,o.jsx)(n.code,{children:"interface"})," que defina los m\xe9todos HTTP que vamos a utilizar. En el caso de nuestra aplicaci\xf3n, solo se contempla la subida de im\xe1genes."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'title="supabase/SupabaseStorageApi.java"',children:'import okhttp3.MultipartBody;\nimport retrofit2.Call;\nimport retrofit2.http.Header;\nimport retrofit2.http.Multipart;\nimport retrofit2.http.POST;\nimport retrofit2.http.Part;\nimport retrofit2.http.Path;\n\npublic interface SupabaseStorageApi {\n\n    @Multipart\n    @POST("storage/v1/object/{bucket}/{fileName}")\n    Call<Void> uploadImage(\n            @Header("Authorization") String authToken,\n            @Path("bucket") String bucket,\n            @Path("fileName") String fileName,\n            @Part MultipartBody.Part file\n    );\n\n}\n'})}),(0,o.jsx)(n.h3,{id:"43-repositorio-de-datos",children:"4.3. Repositorio de datos"}),(0,o.jsxs)(n.p,{children:["Recuerda que el Repository debe actuar como ",(0,o.jsx)(n.strong,{children:"intermediario entre el ViewModel y las fuentes de datos"}),", por ello, a\xf1adimos en \xe9l el c\xf3digo necesario para subir una imagen."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'title="repository/AnunciosRepository.java"',children:'public class AnunciosRepository {\n    // Instancia de Firestore para acceder a la base de datos de anuncios\n    private FirebaseFirestore db;\n    // Instancia de Authentication para consultar el usuario conectado\n    private FirebaseAuth mAuth;\n    // Referencia a la colecci\xf3n de anuncios\n    private CollectionReference coleccionAnuncios;\n    // Instancia de Supabase Storage para almacenar im\xe1genes\n    private SupabaseStorageApi storageApi;\n    \n    private static final String API_KEY = "<TU_API_KEY>"; // Reemplaza con tu API Key\n\n    public AnunciosRepository() {\n        // Inicializaci\xf3n de los atributos de clase\n        db = FirebaseFirestore.getInstance();\n        mAuth = FirebaseAuth.getInstance();\n        coleccionAnuncios = db.collection("anuncios");\n        storageApi = SupabaseClient.getClient().create(SupabaseStorageApi.class);\n    }\n\n    ...\n\n    // En este m\xe9todo no cambia nada porque el anuncio ya llega con el atributo urlImagen setteado\n    public LiveData<Boolean> agregarAnuncio(Anuncio anuncio) {\n        MutableLiveData<Boolean> anuncioAgregado = new MutableLiveData<>();\n        // Generar un nuevo ID para el documento en Firestore\n        String idGenerado = coleccionAnuncios.document().getId();\n\n        // Asignar el ID generado al anuncio antes de guardarlo\n        anuncio.setId(idGenerado);\n\n        // Insertar el anuncio con el ID generado\n        coleccionAnuncios.document(idGenerado)\n                .set(anuncio)\n                .addOnSuccessListener(aVoid -> anuncioAgregado.postValue(true))\n                .addOnFailureListener(e -> anuncioAgregado.postValue(false));\n\n        return anuncioAgregado;\n    }\n\n    // M\xe9todo para subir una imagen a Supabase Storage\n    // Recibe el fichero de la imagen a subir\n    public LiveData<String> uploadImage(File imageFile) {\n        // LiveData en el que devolveremos la URL p\xfablica de la imagen generada\n        MutableLiveData<String> liveDataUrl = new MutableLiveData<>();\n\n        // Crear el cuerpo de la petici\xf3n para enviar a Supabase (en \xe9l se env\xeda el fichero)\n        RequestBody requestFile = RequestBody.create(MediaType.parse("image/*"), imageFile);\n        MultipartBody.Part body = MultipartBody.Part.createFormData("file", imageFile.getName(), requestFile);\n\n        // Llamada a la API de Supabase\n        // Param 1: Tu API KEY (Autenticaci\xf3n)\n        // Param 2: nombre de tu bucket\n        // Param 3: nombre con el que se crear\xe1 el fichero en Supabase\n        // Param 4: cuerpo de la petici\xf3n (imagen)\n        Call<Void> call = storageApi.uploadImage("Bearer " + API_KEY, "anuncios", imageFile.getName(), body);\n\n        // Enviamos la petici\xf3n en segundo plano\n        call.enqueue(new Callback<Void>() {\n            @Override\n            public void onResponse(Call<Void> call, Response<Void> response) {\n                if (response.isSuccessful()) {\n                    // Si todo va bien, recuperamos la URL p\xfablica de la imagen en Supabase\n                    // Esta URL ser\xe1 la que guardemos en nuestra base de datos\n                    String fileUrl = response.raw().request().url().toString();\n                    // Almacenamos el valor en el LiveData\n                    liveDataUrl.postValue(fileUrl);\n                } else {\n                    // Si no se ha podido completar la petici\xf3n, devolvemos null\n                    liveDataUrl.postValue(null);\n                }\n            }\n\n            @Override\n            public void onFailure(Call<Void> call, Throwable t) {\n                // Si no se ha podido completar la petici\xf3n, devolvemos null\n                liveDataUrl.postValue(null);\n            }\n        });\n\n        // Devolvemos el LiveData con la URL de nuestra imagen\n        return liveDataUrl;\n    }\n}\n'})}),(0,o.jsx)(n.h3,{id:"44-viewmodel",children:"4.4. ViewModel"}),(0,o.jsxs)(n.p,{children:["El ",(0,o.jsx)(n.code,{children:"ViewModel"})," implementa el m\xe9todo ",(0,o.jsx)(n.code,{children:"agregarAnuncio"}),", que se encarga de realizar dos operaciones de manera secuencial:"]}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Subir la imagen a Supabase Storage"})," mediante ",(0,o.jsx)(n.code,{children:"repository.uploadImage(imageFile)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Guardar el anuncio en Firestore"})," mediante ",(0,o.jsx)(n.code,{children:"repository.agregarAnuncio(anuncio)"}),", pero ",(0,o.jsx)(n.strong,{children:"solo despu\xe9s de haber obtenido la URL de la imagen"}),"."]}),"\n"]}),(0,o.jsxs)(n.h4,{id:"-problema-dependencia-entre-las-dos-operaciones",children:["\ud83d\udd39 ",(0,o.jsx)(n.strong,{children:"Problema: Dependencia entre las dos operaciones"})]}),(0,o.jsxs)(n.p,{children:["El principal desaf\xedo en este proceso es que ",(0,o.jsx)(n.strong,{children:"el anuncio no puede subirse hasta que la imagen haya sido almacenada correctamente en Supabase"}),", ya que necesitamos la URL generada por el servidor para incluirla en el objeto ",(0,o.jsx)(n.code,{children:"Anuncio"})," antes de guardarlo en Firestore."]}),(0,o.jsxs)(n.p,{children:["Dado que ",(0,o.jsx)(n.strong,{children:"Retrofit maneja las llamadas de forma as\xedncrona"}),", no podemos simplemente llamar a los m\xe9todos uno tras otro. En su lugar, necesitamos un mecanismo que garantice que ",(0,o.jsx)(n.code,{children:"agregarAnuncio"})," solo se ejecute una vez que ",(0,o.jsx)(n.code,{children:"uploadImage"})," haya finalizado con \xe9xito."]}),(0,o.jsxs)(n.p,{children:["Para resolver esto, utilizamos ",(0,o.jsx)(n.code,{children:"Transformations.switchMap"}),", que nos permite ",(0,o.jsx)(n.strong,{children:"encadenar"})," la subida de la imagen y el guardado del anuncio de manera reactiva."]}),(0,o.jsxs)(n.h4,{id:"-qu\xe9-es-transformationsswitchmap",children:["\ud83d\udd39 ",(0,o.jsxs)(n.strong,{children:["\xbfQu\xe9 es ",(0,o.jsx)(n.code,{children:"Transformations.switchMap"}),"?"]})]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Transformations.switchMap"})," es una utilidad de LiveData en Android que nos permite ",(0,o.jsx)(n.strong,{children:"transformar y encadenar datos en tiempo real"}),". Funciona de la siguiente manera:"]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Recibe un LiveData de entrada"})," (en este caso, el ",(0,o.jsx)(n.code,{children:"LiveData<String>"})," de ",(0,o.jsx)(n.code,{children:"uploadImage()"})," que devuelve la URL de la imagen)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Transforma el valor emitido por ese LiveData"})," en un nuevo LiveData (en este caso, el ",(0,o.jsx)(n.code,{children:"LiveData<Boolean>"})," que devuelve ",(0,o.jsx)(n.code,{children:"agregarAnuncio()"}),")."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Retorna el nuevo LiveData"}),", asegurando que solo se ejecute despu\xe9s de que el primer LiveData haya emitido un valor."]}),"\n"]}),(0,o.jsx)(n.p,{children:"Gracias a esto, conseguimos que:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"repository.uploadImage(imageFile)"})," se ejecute primero."]}),"\n",(0,o.jsxs)(n.li,{children:["Cuando la imagen se sube con \xe9xito, ",(0,o.jsx)(n.code,{children:"switchMap"})," obtiene la URL."]}),"\n",(0,o.jsxs)(n.li,{children:["Solo entonces se llama a ",(0,o.jsx)(n.code,{children:"repository.agregarAnuncio(anuncio)"}),"."]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public class AnunciosViewModel extends AndroidViewModel {\n\n    private AnunciosRepository repository;\n\n    public AnunciosViewModel(@NonNull Application application) {\n        super(application);\n        repository = new AnunciosRepository();\n    }\n\n    ...\n\n    public LiveData<Boolean> agregarAnuncio(String contenido, Uri imageFileUri) {\n        MutableLiveData<Boolean> resultadoLiveData = new MutableLiveData<>();\n\n        try {\n            // Convertimos el Uri en un File para enviarlo a Supabase\n            // M\xe1s abajo tienes el c\xf3digo de esa clase est\xe1tica\n            File imageFile = ImageUtils.getFileFromUri(getApplication().getApplicationContext(), imageFileUri);\n\n            // Usamos switchMap para esperar a que la imagen se suba antes de guardar el anuncio\n            return Transformations.switchMap(repository.uploadImage(imageFile), fileUrl -> {\n                if (fileUrl != null) {\n                    // Creamos el anuncio solo si tenemos la URL de la imagen\n                    Anuncio anuncio = new Anuncio(contenido, System.currentTimeMillis(), getConnectedUserEmail(), fileUrl);\n                    return repository.agregarAnuncio(anuncio);\n                } else {\n                    // Si la subida falla, devolvemos false\n                    resultadoLiveData.postValue(false);\n                    return resultadoLiveData;\n                }\n            });\n\n        } catch (IOException e) {\n            // Capturamos posibles errores en la conversi\xf3n del archivo\n            resultadoLiveData.postValue(false);\n        }\n\n        return resultadoLiveData;\n    }\n}\n"})}),(0,o.jsxs)(n.h4,{id:"por-qu\xe9-usar-switchmap-en-lugar-de-un-simple-observer",children:["\xbfPor qu\xe9 usar ",(0,o.jsx)(n.code,{children:"switchMap"})," en lugar de un simple ",(0,o.jsx)(n.code,{children:"Observer"}),"?"]}),(0,o.jsxs)(n.p,{children:["No es buena pr\xe1ctica utiliza ",(0,o.jsx)(n.code,{children:"Observers"})," dentro del ViewModel y adem\xe1s, tendr\xedamos que utilizar el m\xe9todo ",(0,o.jsx)(n.code,{children:".observeForever()"}),", que puede producir fugas de memoria."]}),(0,o.jsxs)(n.admonition,{title:"OBTENER EL FICHERO (FILE) A PARTIR DE LA URI",type:"info",children:[(0,o.jsx)(n.p,{children:"En la siguiente clase encontrar\xe1s el c\xf3digo para pasar de una URI a un fichero:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'title="utils/ImageUtils.java"',children:'public class ImageUtils {\n\n    public static File getFileFromUri(Context context, Uri uri) throws IOException {\n        InputStream inputStream = context.getContentResolver().openInputStream(uri);\n        File tempFile = File.createTempFile("upload_", ".jpg", context.getCacheDir());\n        tempFile.deleteOnExit();\n\n        FileOutputStream outputStream = new FileOutputStream(tempFile);\n        byte[] buffer = new byte[1024];\n        int length;\n\n        while ((length = inputStream.read(buffer)) > 0) {\n            outputStream.write(buffer, 0, length);\n        }\n\n        outputStream.close();\n        inputStream.close();\n\n        return tempFile;\n    }\n}\n'})})]}),(0,o.jsx)(n.hr,{}),(0,o.jsxs)(n.h2,{id:"5-adaptar-el-c\xf3digo-de-tablonfragment",children:["5. Adaptar el c\xf3digo de ",(0,o.jsx)(n.code,{children:"TablonFragment"})]}),(0,o.jsxs)(n.p,{children:["Actualizamos el c\xf3digo para establecer el Listener del bot\xf3n que sube la imagen, utilizando para ello un ",(0,o.jsx)(n.code,{children:"ActivityResultLauncher"})," como ya estudiamos."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",metastring:'title="TablonFragment.java"',children:'public class TablonFragment extends Fragment {\n\n    ...\n\n    // Lanzador que gestiona actividades externas\n    private ActivityResultLauncher<Intent> imagePickerLauncher;\n    private Uri selectedImageUri;\n\n    ...\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        ...\n\n        binding.btnPublicar.setOnClickListener(v -> publicarAnuncio());\n\n        ...\n\n        // Indicamos al lanzador qu\xe9 debe hacer cuando se haya seleccionado la imagen y hayamos vuelto al fragment\n        imagePickerLauncher = registerForActivityResult(\n                new ActivityResultContracts.StartActivityForResult(),\n                new ActivityResultCallback<ActivityResult>() {\n                    @Override\n                    public void onActivityResult(ActivityResult result) { //  Se ejecuta autom\xe1ticamente cuando el usuario selecciona una imagen o cancela.\n                        // Si se ha seleccionado una imagen, la recuperamos del par\xe1metro del m\xe9todo\n                        if (result.getResultCode() == RESULT_OK && result.getData() != null) {\n                            selectedImageUri = result.getData().getData();  // URI de la imagen seleccionada\n                            // Ponemos el bot\xf3n de Publicar como habilitado\n                            binding.btnPublicar.setEnabled(true);\n                        }\n                    }\n                }\n        );\n\n        binding.btnSubirImagen.setOnClickListener(v -> {\n            Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n            imagePickerLauncher.launch(intent);\n        });\n    }\n\n    private void publicarAnuncio() {\n        String contenido = binding.etAnuncio.getText().toString();\n        if (!contenido.isEmpty() && selectedImageUri != null) {\n            // Llamamos al m\xe9todo del ViewModel para insertar el anuncio\n            anunciosViewModel.agregarAnuncio(contenido, selectedImageUri).observe(getViewLifecycleOwner(), new Observer<Boolean>() {\n                @Override\n                public void onChanged(Boolean anadido) {\n                    if (anadido) {\n                        Toast.makeText(getContext(), "Anuncio a\xf1adido", Toast.LENGTH_SHORT).show();\n                        // Ponemos el bot\xf3n de Publicar como deshabilitado\n                        binding.btnPublicar.setEnabled(false);\n                    } else {\n                        Toast.makeText(getContext(), "Error al a\xf1adir anuncio", Toast.LENGTH_SHORT).show();\n                    }\n                }\n            });\n            // Reseteamos el valor del EditText\n            binding.etAnuncio.setText("");\n        }\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},4262:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/demo-app-imagenes-094c4f0362a388c4d640e0b348d1feb0.gif"},7058:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/diagrama-sec-app-imagen-9bc90618cabd539328322d4d749a51d2.png"},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>s});var i=a(6540);const o={},r=i.createContext(o);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);