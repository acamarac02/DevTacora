"use strict";(self.webpackChunkpmdm=self.webpackChunkpmdm||[]).push([[5487],{315:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"pmdm_2526/ut1_programacion_movil/aplicacion-basica","title":"Aplicaci\xf3n b\xe1sica","description":"Construcci\xf3n de una aplicaci\xf3n contadora de clicks en Android con una sola Activity.","source":"@site/docs/01_pmdm_2526/ut1_programacion_movil/3-aplicacion-basica.md","sourceDirName":"01_pmdm_2526/ut1_programacion_movil","slug":"/pmdm_2526/ut1_programacion_movil/aplicacion-basica","permalink":"/DevTacora/docs/pmdm_2526/ut1_programacion_movil/aplicacion-basica","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Aplicaci\xf3n b\xe1sica","sidebar_position":3,"description":"Construcci\xf3n de una aplicaci\xf3n contadora de clicks en Android con una sola Activity.","keywords":["Android","Java","Layout","ViewBinding","OnClickListener","ConstraintLayout"]},"sidebar":"pmdm_2526_Sidebar","previous":{"title":"Puesta en marcha","permalink":"/DevTacora/docs/pmdm_2526/ut1_programacion_movil/puesta-marcha-android-studio"},"next":{"title":"Ciclo de vida de una aplicaci\xf3n","permalink":"/DevTacora/docs/pmdm_2526/ut1_programacion_movil/ciclo-vida"}}');var t=a(74848),o=a(28453);const r={title:"Aplicaci\xf3n b\xe1sica",sidebar_position:3,description:"Construcci\xf3n de una aplicaci\xf3n contadora de clicks en Android con una sola Activity.",keywords:["Android","Java","Layout","ViewBinding","OnClickListener","ConstraintLayout"]},s="Aplicaci\xf3n b\xe1sica",d={},l=[{value:"Editar el Layout",id:"editar-el-layout",level:2},{value:"Modos de edici\xf3n",id:"modos-de-edici\xf3n",level:3},{value:"An\xe1lisis de la interfaz de &quot;Hello World&quot;",id:"an\xe1lisis-de-la-interfaz-de-hello-world",level:3},{value:"<strong>ConstraintLayout</strong>",id:"constraintlayout",level:4},{value:"<strong>TextView</strong>",id:"textview",level:4},{value:"Interfaz de la app contadora",id:"interfaz-de-la-app-contadora",level:3},{value:"Programar el Comportamiento",id:"programar-el-comportamiento",level:2},{value:"Enlazando elementos (forma tradicional)",id:"enlazando-elementos-forma-tradicional",level:3},{value:"Enlazando elementos (ViewBinding)",id:"enlazando-elementos-viewbinding",level:3},{value:"Programando el bot\xf3n (tradicional)",id:"programando-el-bot\xf3n-tradicional",level:3},{value:"Programando el bot\xf3n (lambdas)",id:"programando-el-bot\xf3n-lambdas",level:3}];function c(e){const n={admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"aplicaci\xf3n-b\xe1sica",children:"Aplicaci\xf3n b\xe1sica"})}),"\n",(0,t.jsxs)("div",{class:"justify-text",children:[(0,t.jsxs)(n.p,{children:["En esta segunda parte vamos a crear una ",(0,t.jsx)(n.strong,{children:"aplicaci\xf3n sencilla en Android"}),": un contador de clics implementado con una sola Activity."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"GIF resumen de la aplicaci\xf3n",src:a(7673).A+"",width:"386",height:"850"})}),(0,t.jsxs)(n.p,{children:["La interfaz estar\xe1 construida con un ",(0,t.jsx)(n.strong,{children:"ConstraintLayout"})," que incluir\xe1 un campo de texto para mostrar el n\xfamero de clics y un bot\xf3n que permitir\xe1 incrementarlo."]}),(0,t.jsxs)(n.p,{children:["Este ejemplo nos servir\xe1 como primer acercamiento pr\xe1ctico a la relaci\xf3n entre ",(0,t.jsx)(n.strong,{children:"dise\xf1o de interfaz (XML)"})," y ",(0,t.jsx)(n.strong,{children:"l\xf3gica de programaci\xf3n (Java)"})," dentro de una aplicaci\xf3n Android."]}),(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["En Android, una aplicaci\xf3n suele estar formada por varias ",(0,t.jsx)(n.strong,{children:"Activities"})," entre las que el usuario puede navegar. En este ejercicio trabajaremos \xfanicamente con una, lo que nos permitir\xe1 centrarnos en comprender su funcionamiento b\xe1sico."]})}),(0,t.jsx)(n.hr,{}),(0,t.jsx)(n.h2,{id:"editar-el-layout",children:"Editar el Layout"}),(0,t.jsxs)(n.p,{children:["El primer paso ser\xe1 preparar la interfaz de usuario.\nEn Android, los ",(0,t.jsx)(n.strong,{children:"layouts"})," se definen en archivos ",(0,t.jsx)(n.strong,{children:"XML"})," que se encuentran dentro de la carpeta ",(0,t.jsx)(n.code,{children:"res/layout"}),". Estos archivos describen c\xf3mo se organizan y presentan los distintos elementos visuales en la pantalla."]}),(0,t.jsx)(n.h3,{id:"modos-de-edici\xf3n",children:"Modos de edici\xf3n"}),(0,t.jsx)(n.p,{children:"Android Studio ofrece dos formas principales de trabajar con los layouts:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modo gr\xe1fico (Design):"})," permite construir la interfaz de forma visual, arrastrando componentes desde la paleta y ajustando sus propiedades con el rat\xf3n. Es \xfatil para obtener una vista r\xe1pida del resultado y mover elementos con facilidad."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modo c\xf3digo (XML):"})," consiste en escribir directamente el XML que define la interfaz. Aporta un mayor control, precisi\xf3n y comprensi\xf3n de lo que ocurre \u201cpor debajo\u201d del editor gr\xe1fico."]}),"\n"]}),(0,t.jsxs)(n.p,{children:["En la pr\xe1ctica, ",(0,t.jsx)(n.strong,{children:"ambos modos se complementan"}),". Por ejemplo:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Con ",(0,t.jsx)(n.strong,{children:"ConstraintLayout"})," suele resultar m\xe1s \xe1gil comenzar en el editor gr\xe1fico, ya que las restricciones se entienden mejor visualmente."]}),"\n",(0,t.jsxs)(n.li,{children:["Con ",(0,t.jsx)(n.strong,{children:"LinearLayout"})," u otros layouts m\xe1s simples, escribir el XML directamente suele ser m\xe1s r\xe1pido y claro."]}),"\n"]}),(0,t.jsx)(n.h3,{id:"an\xe1lisis-de-la-interfaz-de-hello-world",children:'An\xe1lisis de la interfaz de "Hello World"'}),(0,t.jsxs)(n.p,{children:["Cuando creamos una aplicaci\xf3n Android nueva, esta contiene por defecto un texto ",(0,t.jsx)(n.strong,{children:'"Hello World"'}),". Vamos a analizar esta interfaz para comprender ciertos aspectos antes de continuar."]}),(0,t.jsx)(n.p,{children:"El c\xf3digo que contiene es:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",metastring:'title="MainActivity.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:id="@+id/main"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Hello World"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),(0,t.jsxs)(n.p,{children:["Podemos ver que el texto se define dentro de un campo llamado ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"TextView"})}),", que a su vez est\xe1 contenido dentro de un ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ConstraintLayout"})}),".\nToda interfaz Android debe estar contenida dentro de alguno de los layouts existentes (",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"LinearLayout"})}),", ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ConstraintLayout"})}),", ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"FrameLayout"})}),", etc.)."]}),(0,t.jsx)(n.h4,{id:"constraintlayout",children:(0,t.jsx)(n.strong,{children:"ConstraintLayout"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ConstraintLayout"})})," es un tipo de layout muy flexible en Android que permite posicionar y dimensionar vistas usando ",(0,t.jsx)(n.strong,{children:"restricciones (constraints)"}),". Con \xe9l podemos dise\xf1ar interfaces complejas en una sola jerarqu\xeda, evitando tener que anidar muchos layouts diferentes."]}),(0,t.jsxs)(n.p,{children:["Cada elemento de la vista (por ejemplo, el ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"TextView"})}),") debe estar \u201catado\u201d al menos en ",(0,t.jsx)(n.strong,{children:"dos direcciones (horizontal y vertical)"}),", por ejemplo: arriba y abajo, izquierda y derecha, o centrado en el padre. Podemos imaginar las constraints como ",(0,t.jsx)(n.strong,{children:"\u201cmuelles\u201d"})," que tiran del elemento en cuatro direcciones (arriba, abajo, izquierda y derecha). El widget queda equilibrado entre las fuerzas definidas."]}),(0,t.jsxs)(n.p,{children:["En el caso del ",(0,t.jsx)(n.strong,{children:"TextView"})," vemos que ya hay definidas ",(0,t.jsx)(n.strong,{children:"cuatro constraints"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'app:layout_constraintBottom_toBottomOf="parent"\napp:layout_constraintEnd_toEndOf="parent"\napp:layout_constraintStart_toStartOf="parent"\napp:layout_constraintTop_toTopOf="parent"\n'})}),(0,t.jsx)(n.p,{children:"Donde:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:'constraintTop_toTopOf="parent"'})})," \u2192 tira hacia la parte superior del padre."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:'constraintBottom_toBottomOf="parent"'})})," \u2192 hacia la parte inferior."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:'constraintStart_toStartOf="parent"'})})," \u2192 hacia la izquierda."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:'constraintEnd_toEndOf="parent"'})})," \u2192 hacia la derecha."]}),"\n"]}),(0,t.jsxs)(n.p,{children:["Ten en cuenta que el ",(0,t.jsxs)(n.strong,{children:["padre del ",(0,t.jsx)(n.code,{children:"TextView"})," es el ",(0,t.jsx)(n.code,{children:"ConstraintLayout"})]}),"."]}),(0,t.jsxs)(n.p,{children:["Si analizamos la posici\xf3n del ",(0,t.jsx)(n.code,{children:"TextView"})," desde la vista de dise\xf1o, podemos ver que todas las fuerzas est\xe1n en ",(0,t.jsx)(n.strong,{children:"equilibrio (valor 0)"}),"."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Fuerza muelle 0",src:a(30039).A+"",width:"383",height:"309"})}),(0,t.jsx)(n.p,{children:"Si queremos que el elemento est\xe9 m\xe1s desplazado hacia arriba, tenemos dos formas de hacerlo:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Modificar el atributo ",(0,t.jsx)(n.code,{children:"Vertical bias"})]})," (u ",(0,t.jsx)(n.code,{children:"Horizontal bias"})," si el desplazamiento fuera hacia izquierda o derecha) a ",(0,t.jsx)(n.strong,{children:"0.2"}),". En este caso el elemento se coloca m\xe1s cerca del borde superior (20% desde arriba y 80% hacia abajo). Al trabajar en porcentajes, la posici\xf3n es ",(0,t.jsx)(n.strong,{children:"proporcional y adaptable"})," a cualquier tama\xf1o de pantalla."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Modificado vertical bias",src:a(32806).A+"",width:"1144",height:"807"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Romper el equilibrio entre las fuerzas"}),", asignando un ",(0,t.jsx)(n.strong,{children:"margen fijo"})," en la parte superior en lugar de 0. Si te fijas, hemos quitado el muelle hacia el ",(0,t.jsx)(n.strong,{children:"bottom"})," para evitar que tire desde ah\xed. Este mecanismo es ",(0,t.jsx)(n.strong,{children:"m\xe1s r\xedgido"})," que el anterior, pudiendo provocar que en pantallas peque\xf1as quede demasiado separado, y en pantallas grandes demasiado arriba."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Modificado distancia top",src:a(92856).A+"",width:"1146",height:"806"})}),"\n"]}),"\n"]}),(0,t.jsx)(n.h4,{id:"textview",children:(0,t.jsx)(n.strong,{children:"TextView"})}),(0,t.jsxs)(n.p,{children:["En el campo de texto, adem\xe1s de los atributos ya mencionados relacionados con el ",(0,t.jsx)(n.code,{children:"ConstraintLayout"}),", podemos ver las siguientes propiedades:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Los atributos ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"layout_width"})})," y ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"layout_height"})})," especifican el ancho y alto del elemento:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["El valor ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"wrap_content"})})," indica que el ancho/alto se adapta al contenido del elemento (en el caso del Button y el TextView, al texto que contienen)."]}),"\n",(0,t.jsxs)(n.li,{children:["El valor ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"match_parent"})})," indica que el ancho/alto debe ser el mismo que el del elemento padre."]}),"\n",(0,t.jsxs)(n.li,{children:["Tambi\xe9n se puede establecer un ancho/alto de ",(0,t.jsx)(n.strong,{children:"tama\xf1o fijo en p\xedxeles (dp/px)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["El atributo ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"text"})})," especifica el texto que se muestra en la interfaz."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["El atributo ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"id"})})," es el ",(0,t.jsx)(n.strong,{children:"identificador \xfanico"})," de ese recurso. El nombre debe ser algo que permita identificar r\xe1pidamente el tipo de campo y su funci\xf3n.\nSi lo modificas desde la vista de c\xf3digo, en el valor hay que poner ",(0,t.jsx)(n.strong,{children:"@+id/"})," antes del identificador que quieras asignar."]}),"\n"]}),"\n"]}),(0,t.jsx)(n.p,{children:"Por ejemplo:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<TextView\n    android:id="@+id/textoInicial"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:layout_marginTop="60dp"\n    android:text="Hola mundo"\n    app:layout_constraintEnd_toEndOf="parent"\n    app:layout_constraintStart_toStartOf="parent"\n    app:layout_constraintTop_toTopOf="parent" />\n'})}),(0,t.jsx)(n.admonition,{title:"IMPORTANCIA DEL ID",type:"info",children:(0,t.jsxs)(n.p,{children:["Todos los campos que vayan a ser modificados o consultados desde la l\xf3gica (desde Java) deben tener definido un ",(0,t.jsx)(n.strong,{children:"id"}),". En caso contrario, no podr\xe1s acceder a ellos."]})}),(0,t.jsx)(n.h3,{id:"interfaz-de-la-app-contadora",children:"Interfaz de la app contadora"}),(0,t.jsx)(n.p,{children:"Nuestra aplicaci\xf3n b\xe1sica contar\xe1 con dos elementos principales:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Un ",(0,t.jsx)(n.strong,{children:"TextView"})," que mostrar\xe1 el n\xfamero de veces que se ha pulsado el bot\xf3n."]}),"\n",(0,t.jsxs)(n.li,{children:["Un ",(0,t.jsx)(n.strong,{children:"Button"})," que incrementar\xe1 ese n\xfamero cada vez que el usuario lo presione."]}),"\n"]}),(0,t.jsxs)(n.p,{children:["Para el texto, reutilizaremos el ",(0,t.jsx)(n.code,{children:"TextView"})," que inicialmente contiene el mensaje ",(0,t.jsx)(n.em,{children:"\u201cHello World\u201d"}),", personalizando su contenido mediante el atributo ",(0,t.jsx)(n.code,{children:"android:text"})," y a\xf1adi\xe9ndole un identificador \xfanico."]}),(0,t.jsx)(n.p,{children:"Esto puede hacerse directamente desde el c\xf3digo:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",metastring:'title="MainActivity.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:id="@+id/main"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/textoContador"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Has clickado 0 veces"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),(0,t.jsx)(n.p,{children:"O bien desde el editor gr\xe1fico, modificando los atributos:"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Modificar atributos",src:a(8574).A+"",width:"1491",height:"854"})}),(0,t.jsxs)(n.p,{children:["A continuaci\xf3n a\xf1adiremos un bot\xf3n debajo del texto. Para lograrlo, anclaremos la parte superior del bot\xf3n a la parte inferior del ",(0,t.jsx)(n.code,{children:"TextView"})," y le aplicaremos un ",(0,t.jsx)(n.code,{children:"Vertical bias"})," de 0.3 para situarlo m\xe1s pr\xf3ximo a la parte superior."]}),(0,t.jsx)(n.p,{children:"El layout completo queda as\xed:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",metastring:'title="MainActivity.xml"',children:'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:id="@+id/main"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/textoContador"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Has clickado 0 veces"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toTopOf="parent" />\n\n    <Button\n        android:id="@+id/btnContador"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Contar"\n        app:layout_constraintBottom_toBottomOf="parent"\n        app:layout_constraintEnd_toEndOf="parent"\n        app:layout_constraintStart_toStartOf="parent"\n        app:layout_constraintTop_toBottomOf="@+id/textoContador"\n        app:layout_constraintVertical_bias="0.3" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),(0,t.jsx)(n.hr,{}),(0,t.jsx)(n.h2,{id:"programar-el-comportamiento",children:"Programar el Comportamiento"}),(0,t.jsxs)(n.p,{children:["Una vez definida la interfaz, necesitamos programar qu\xe9 ocurre al interactuar con ella.",(0,t.jsx)(n.br,{}),"\n","En este caso, queremos que al pulsar el bot\xf3n se incremente el contador y se actualice el texto del ",(0,t.jsx)(n.code,{children:"TextView"}),"."]}),(0,t.jsx)(n.h3,{id:"enlazando-elementos-forma-tradicional",children:"Enlazando elementos (forma tradicional)"}),(0,t.jsxs)(n.p,{children:["Para acceder a un ",(0,t.jsx)(n.code,{children:"TextView"})," o ",(0,t.jsx)(n.code,{children:"Button"})," desde la Activity, debemos crear una variable y vincularla usando el m\xe9todo ",(0,t.jsx)(n.code,{children:"findViewById()"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="MainActivity.java"',children:"public class MainActivity extends AppCompatActivity {\n\n    private TextView textoContador;\n    private  Button btnContador;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Establecemos el layout que debe cargar esta Activity\n        setContentView(R.layout.activity_main);\n\n        // Una vez cargado el layout, ya podemos acceder a sus elementos\n        textoContador = findViewById(R.id.textoContador);\n        btnContador = findViewById(R.id.btnContador);\n    }\n}\n"})}),(0,t.jsxs)(n.p,{children:["Utilizando las referencias a ",(0,t.jsx)(n.code,{children:"textoContador"})," y ",(0,t.jsx)(n.code,{children:"btnContador"})," podremos modificar sus propiedades desde el c\xf3digo Java."]}),(0,t.jsx)(n.h3,{id:"enlazando-elementos-viewbinding",children:"Enlazando elementos (ViewBinding)"}),(0,t.jsxs)(n.p,{children:["El m\xe9todo anterior funciona, pero en proyectos con muchas vistas puede volverse tedioso.",(0,t.jsx)(n.br,{}),"\n","Para simplificarlo, Android ofrece ",(0,t.jsx)(n.strong,{children:"ViewBinding"}),", que permite acceder directamente a los elementos del layout sin llamadas repetitivas a ",(0,t.jsx)(n.code,{children:"findViewById()"}),"."]}),(0,t.jsxs)(n.p,{children:["Para activarlo, en ",(0,t.jsx)(n.code,{children:"build.gradle (Module: app)"})," a\xf1ade:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:"android {\n    buildFeatures {\n        viewBinding = true\n    }\n\n    ...\n}\n"})}),(0,t.jsxs)(n.admonition,{title:"Sincronizaci\xf3n",type:"warning",children:[(0,t.jsx)(n.p,{children:"Cualquiero modificaci\xf3n que se realice sobre el build.gradle requiere sincronizar para descargar las nuevas dependencias."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Sincronizar Gradle",src:a(86590).A+"",width:"1490",height:"321"})})]}),(0,t.jsx)(n.p,{children:"Este m\xe9todo de enlace, requiere una nueva forma de inicializar la activity:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="MainActivity.java"',children:"public class MainActivity extends AppCompatActivity {\n\n    // Variable que sirve como enlace\n    private ActivityMainBinding binding;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Establecemos el layout que debe cargar esta Activity\n        setContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot());\n    }\n}\n"})}),(0,t.jsx)(n.p,{children:"Ahora puedes acceder directamente a los elementos de esta forma:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'binding.textViewContador.setText("0");\n'})}),(0,t.jsx)(n.h3,{id:"programando-el-bot\xf3n-tradicional",children:"Programando el bot\xf3n (tradicional)"}),(0,t.jsxs)(n.p,{children:["Para que un bot\xf3n reaccione al clic, debemos usar el m\xe9todo ",(0,t.jsx)(n.code,{children:"setOnClickListener()"})," y definir qu\xe9 hacer en su ",(0,t.jsx)(n.code,{children:"onClick()"}),"."]}),(0,t.jsx)(n.p,{children:"Ejemplo sencillo:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class MainActivity extends AppCompatActivity {\n\n    // Variable que sirve como enlace\n    private ActivityMainBinding binding;\n    \n    // Variable que cuenta el n\xba de clicks\n    private int contador = 0;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Establecemos el layout que debe cargar esta Activity\n        setContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot());\n\n        binding.btnContador.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Actualizamos el valor del contador\n                contador++; \n                // Actualizamos el texto que muestra la cuenta\n                binding.textoContador.setText("Has clickado " + contador + " veces");\n            }\n        });\n    }\n}\n'})}),(0,t.jsx)(n.h3,{id:"programando-el-bot\xf3n-lambdas",children:"Programando el bot\xf3n (lambdas)"}),(0,t.jsxs)(n.p,{children:["Cuando la l\xf3gica que debe ejecutarse en el evento es m\xe1s extensa, conviene separar el c\xf3digo en un ",(0,t.jsx)(n.strong,{children:"m\xe9todo independiente"})," y llamarlo desde el ",(0,t.jsx)(n.code,{children:"onClick()"}),"."]}),(0,t.jsxs)(n.p,{children:["Con Java 8 podemos simplificar usando una ",(0,t.jsx)(n.strong,{children:"expresi\xf3n lambda"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="MainActivity.java"',children:'public class MainActivity extends AppCompatActivity {\n\n    // Variable que sirve como enlace\n    private ActivityMainBinding binding;\n\n    // Variable que cuenta el n\xba de clicks\n    private int contador = 0;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Establecemos el layout que debe cargar esta Activity\n        setContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot());\n\n        binding.btnContador.setOnClickListener(v -> incrementarContador(v));\n    }\n\n    // M\xe9todo externo que reacciona al evento\n    private void incrementarContador(View v) {\n        // Actualizamos el valor del contador\n        contador++;\n        // Actualizamos el texto que muestra la cuenta\n        binding.textoContador.setText("Has clickado " + contador + " veces");\n    }\n}\n'})}),(0,t.jsxs)(n.p,{children:["Aqu\xed, ",(0,t.jsx)(n.code,{children:"v"})," representa la vista que ha sido pulsada (el bot\xf3n en este caso)."]}),(0,t.jsx)(n.admonition,{title:"EJERCICIO",type:"info",children:(0,t.jsxs)(n.p,{children:["Modifica la aplicaci\xf3n del contador a\xf1adiendo un bot\xf3n adicional para ",(0,t.jsx)(n.strong,{children:"resetear el contador"}),"."]})})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},7673:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/app-contador-62fe26788e1125042d2d8f3ac18f8f09.gif"},8574:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/modificar-atributos-fc97c277e423e8ac373b1de396501b7d.png"},28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>s});var i=a(96540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},30039:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/fuerza-muelle-0-9782fa3b9a9e7d657139d0425292ea4b.png"},32806:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/modificado-vertical-bias-f26b5f599f6190094423cc15de025fbd.png"},86590:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/sincronizar-gradle-187934f083134c2d9f59492d1f0644f9.png"},92856:(e,n,a)=>{a.d(n,{A:()=>i});const i=a.p+"assets/images/fuerza-dp-4f551bcad97368f41bc0163a776d7633.png"}}]);