"use strict";(self.webpackChunkpmdm=self.webpackChunkpmdm||[]).push([[9703],{5598:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"pmdm_2526/ut5_persistencia/firebase/firestore/lectura-tiempo-real","title":"Lectura en Tiempo Real","description":"Firestore ofrece la posibilidad de sincronizar datos en tiempo real utilizando SnapshotListener. Esto permite que nuestra aplicaci\xf3n se actualice autom\xe1ticamente cada vez que haya cambios en la base de datos, sin necesidad de hacer consultas manuales repetidas.","source":"@site/docs/01_pmdm_2526/ut5_persistencia/4-firebase/2-firestore/3-lectura-tiempo-real.md","sourceDirName":"01_pmdm_2526/ut5_persistencia/4-firebase/2-firestore","slug":"/pmdm_2526/ut5_persistencia/firebase/firestore/lectura-tiempo-real","permalink":"/DevTacora/docs/pmdm_2526/ut5_persistencia/firebase/firestore/lectura-tiempo-real","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Lectura en Tiempo Real","title":"Lectura en Tiempo Real"},"sidebar":"pmdm_2526_Sidebar","previous":{"title":"Operaciones CRUD","permalink":"/DevTacora/docs/pmdm_2526/ut5_persistencia/firebase/firestore/operaciones-crud"},"next":{"title":"Gesti\xf3n de Subcolecciones","permalink":"/DevTacora/docs/pmdm_2526/ut5_persistencia/firebase/firestore/gestion-subcolecciones"}}');var o=i(4848),c=i(8453);const a={sidebar_position:3,sidebar_label:"Lectura en Tiempo Real",title:"Lectura en Tiempo Real"},r=void 0,t={},l=[{value:"\ud83d\udd39 Escuchar cambios en la colecci\xf3n de Anuncios",id:"-escuchar-cambios-en-la-colecci\xf3n-de-anuncios",level:2},{value:"\ud83d\udccc C\xf3digo: Escuchar todos los anuncios en tiempo real",id:"-c\xf3digo-escuchar-todos-los-anuncios-en-tiempo-real",level:3},{value:"\ud83d\udd0d Explicaci\xf3n del c\xf3digo",id:"-explicaci\xf3n-del-c\xf3digo",level:3},{value:"\ud83d\udd39 Escuchar un solo anuncio en tiempo real",id:"-escuchar-un-solo-anuncio-en-tiempo-real",level:2},{value:"\ud83d\udd0d Explicaci\xf3n del c\xf3digo",id:"-explicaci\xf3n-del-c\xf3digo-1",level:3},{value:"\ud83d\udd39 Detener <code>SnapshotListener</code>",id:"-detener-snapshotlistener",level:2},{value:"\ud83d\udd0d Explicaci\xf3n del c\xf3digo",id:"-explicaci\xf3n-del-c\xf3digo-2",level:3}];function d(e){const n={admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)("div",{class:"justify-text",children:[(0,o.jsxs)(n.p,{children:["Firestore ofrece la posibilidad de ",(0,o.jsx)(n.strong,{children:"sincronizar datos en tiempo real"})," utilizando ",(0,o.jsx)(n.code,{children:"SnapshotListener"}),". Esto permite que nuestra aplicaci\xf3n se actualice autom\xe1ticamente cada vez que haya cambios en la base de datos, sin necesidad de hacer consultas manuales repetidas."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"SnapshotListener"})," es un ",(0,o.jsx)(n.strong,{children:"escuchador en tiempo real"})," que se suscribe a una colecci\xf3n o documento en Firestore y ",(0,o.jsx)(n.strong,{children:"se activa autom\xe1ticamente"})," cuando los datos cambian."]}),(0,o.jsxs)(n.p,{children:["\u2705 ",(0,o.jsxs)(n.strong,{children:["Ventajas de ",(0,o.jsx)(n.code,{children:"SnapshotListener"}),":"]})]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,o.jsx)(n.strong,{children:"Sincronizaci\xf3n en vivo:"}),' La UI de la app se actualiza en tiempo real sin que el usuario tenga que hacer "pull-to-refresh".']}),"\n",(0,o.jsxs)(n.li,{children:["\u26a1 ",(0,o.jsx)(n.strong,{children:"Eficiencia:"})," Se evitan consultas repetitivas porque Firestore solo env\xeda los cambios."]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd14 ",(0,o.jsx)(n.strong,{children:"Eventos autom\xe1ticos:"})," Detecta cambios en documentos y notifica a la app instant\xe1neamente."]}),"\n"]}),(0,o.jsxs)(n.p,{children:["\ud83d\udea8 ",(0,o.jsx)(n.strong,{children:"Precauci\xf3n:"})," ",(0,o.jsx)(n.code,{children:"SnapshotListener"})," ",(0,o.jsx)(n.strong,{children:"se mantiene activo hasta que se elimine"}),", lo que puede generar consumo innecesario de recursos si no se gestiona correctamente."]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h2,{id:"-escuchar-cambios-en-la-colecci\xf3n-de-anuncios",children:"\ud83d\udd39 Escuchar cambios en la colecci\xf3n de Anuncios"}),(0,o.jsxs)(n.p,{children:["Vamos a crear un ",(0,o.jsx)(n.strong,{children:"escuchador en tiempo real"})," para que nuestra app reciba actualizaciones autom\xe1ticas cuando se agregue, modifique o elimine un anuncio."]}),(0,o.jsx)(n.h3,{id:"-c\xf3digo-escuchar-todos-los-anuncios-en-tiempo-real",children:"\ud83d\udccc C\xf3digo: Escuchar todos los anuncios en tiempo real"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public void listenForAnunciosUpdates() {\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\n\n    db.collection("anuncios")\n        .addSnapshotListener((queryDocumentSnapshots, e) -> {\n            if (e != null) {\n                Log.e("Firestore", "Error al escuchar cambios en anuncios", e);\n                return;\n            }\n\n            if (queryDocumentSnapshots != null) {\n                for (DocumentChange dc : queryDocumentSnapshots.getDocumentChanges()) {\n                    Anuncio anuncio = dc.getDocument().toObject(Anuncio.class);\n\n                    switch (dc.getType()) {\n                        case ADDED:\n                            Log.d("Firestore", "Nuevo anuncio: " + anuncio.getContenido());\n                            break;\n                        case MODIFIED:\n                            Log.d("Firestore", "Anuncio modificado: " + anuncio.getContenido());\n                            break;\n                        case REMOVED:\n                            Log.d("Firestore", "Anuncio eliminado: " + anuncio.getContenido());\n                            break;\n                    }\n                }\n            }\n        });\n}\n'})}),(0,o.jsx)(n.h3,{id:"-explicaci\xf3n-del-c\xf3digo",children:"\ud83d\udd0d Explicaci\xf3n del c\xf3digo"}),(0,o.jsxs)(n.p,{children:["1\ufe0f\u20e3 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:'db.collection("anuncios")'})})," \u2192 Se suscribe a la colecci\xf3n ",(0,o.jsx)(n.code,{children:"anuncios"}),".",(0,o.jsx)(n.br,{}),"\n","2\ufe0f\u20e3 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"addSnapshotListener(...)"})})," \u2192 Se a\xf1ade un ",(0,o.jsx)(n.strong,{children:"escuchador en tiempo real"}),".",(0,o.jsx)(n.br,{}),"\n","3\ufe0f\u20e3 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"if (e != null) {...}"})})," \u2192 Maneja errores en caso de que la conexi\xf3n falle.",(0,o.jsx)(n.br,{}),"\n","4\ufe0f\u20e3 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"queryDocumentSnapshots.getDocumentChanges()"})})," \u2192 Devuelve los cambios que ocurrieron en la colecci\xf3n.",(0,o.jsx)(n.br,{}),"\n","5\ufe0f\u20e3 ",(0,o.jsxs)(n.strong,{children:["Se recorren los cambios con un ",(0,o.jsx)(n.code,{children:"for"})," y ",(0,o.jsx)(n.code,{children:"switch"}),":"]})]}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd39 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"ADDED"})})," \u2192 Cuando se a\xf1ade un nuevo anuncio."]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd39 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"MODIFIED"})})," \u2192 Cuando se edita un anuncio existente."]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd39 ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"REMOVED"})})," \u2192 Cuando se elimina un anuncio."]}),"\n"]}),(0,o.jsx)(n.admonition,{title:"TEN EN CUENTA QUE...",type:"info",children:(0,o.jsx)(n.p,{children:"Dentro del switch deber\xe1s realizar las operaciones oportunas: a\xf1adir el nuevo anuncio a tu lista del RecyclerView cuando la operaci\xf3n es ADD, eliminarla si es MODIFIED..."})}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.h2,{id:"-escuchar-un-solo-anuncio-en-tiempo-real",children:"\ud83d\udd39 Escuchar un solo anuncio en tiempo real"}),(0,o.jsxs)(n.p,{children:["Si en lugar de escuchar todos los anuncios queremos ",(0,o.jsx)(n.strong,{children:"monitorear un anuncio espec\xedfico"}),", podemos usar este c\xf3digo:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public void listenForAnuncio(String anuncioId) {\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\n\n    db.collection("anuncios").document(anuncioId)\n        .addSnapshotListener((documentSnapshot, e) -> {\n            if (e != null) {\n                Log.e("Firestore", "Error al escuchar cambios en el anuncio", e);\n                return;\n            }\n\n            if (documentSnapshot != null && documentSnapshot.exists()) {\n                Anuncio anuncio = documentSnapshot.toObject(Anuncio.class);\n                Log.d("Firestore", "Anuncio actualizado: " + anuncio.getContenido());\n            } else {\n                Log.d("Firestore", "El anuncio ha sido eliminado");\n            }\n        });\n}\n'})}),(0,o.jsx)(n.h3,{id:"-explicaci\xf3n-del-c\xf3digo-1",children:"\ud83d\udd0d Explicaci\xf3n del c\xf3digo"}),(0,o.jsxs)(n.p,{children:["1\ufe0f\u20e3 ",(0,o.jsx)(n.code,{children:'db.collection("anuncios").document(anuncioId)'})," \u2192 Se suscribe a un solo documento.",(0,o.jsx)(n.br,{}),"\n","2\ufe0f\u20e3 Cada vez que el documento cambia, ",(0,o.jsx)(n.code,{children:"addSnapshotListener"})," se activa autom\xe1ticamente.",(0,o.jsx)(n.br,{}),"\n","3\ufe0f\u20e3 Si el ",(0,o.jsx)(n.code,{children:"documentSnapshot.exists()"}),", significa que el anuncio a\xfan existe y se actualiza la UI.",(0,o.jsx)(n.br,{}),"\n","4\ufe0f\u20e3 Si ",(0,o.jsx)(n.code,{children:"documentSnapshot == null"})," o ",(0,o.jsx)(n.code,{children:"!exists()"}),", significa que el anuncio fue eliminado."]}),(0,o.jsx)(n.hr,{}),(0,o.jsxs)(n.h2,{id:"-detener-snapshotlistener",children:["\ud83d\udd39 Detener ",(0,o.jsx)(n.code,{children:"SnapshotListener"})]}),(0,o.jsxs)(n.p,{children:["Como ",(0,o.jsx)(n.code,{children:"SnapshotListener"})," se mantiene activo en todo momento, es importante ",(0,o.jsx)(n.strong,{children:"eliminarlo cuando ya no sea necesario"})," (por ejemplo, cuando el usuario cambia de pantalla o cierra la app)."]}),(0,o.jsx)(n.p,{children:"Para ello, almacenamos el listener en una variable y lo detenemos manualmente:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Variable de tu Fragment\nprivate ListenerRegistration anunciosListener;\n\n// Aqu\xed iniciamos la escucha\n// Puedes llamar a este m\xe9todo en el onViewCreated de tu Fragment\npublic void startListening() {\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\n\n    anunciosListener = db.collection("anuncios")\n        .addSnapshotListener((queryDocumentSnapshots, e) -> {\n            if (e != null) {\n                Log.e("Firestore", "Error al escuchar cambios", e);\n                return;\n            }\n            \n            for (DocumentSnapshot document : queryDocumentSnapshots) {\n                Anuncio anuncio = document.toObject(Anuncio.class);\n                Log.d("Firestore", "Anuncio actualizado: " + anuncio.getContenido());\n            }\n        });\n}\n\n// Aqu\xed eliminamos la escucha\npublic void stopListening() {\n    if (anunciosListener != null) {\n        anunciosListener.remove(); // Desactiva el escuchador\n        Log.d("Firestore", "Listener eliminado");\n    }\n}\n'})}),(0,o.jsx)(n.h3,{id:"-explicaci\xf3n-del-c\xf3digo-2",children:"\ud83d\udd0d Explicaci\xf3n del c\xf3digo"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Guardamos el ",(0,o.jsx)(n.code,{children:"SnapshotListener"})," en la variable ",(0,o.jsx)(n.code,{children:"anunciosListener"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Cuando ya no necesitamos escuchar cambios, llamamos ",(0,o.jsx)(n.code,{children:"anunciosListener.remove()"}),"."]}),"\n"]}),(0,o.jsxs)(n.admonition,{title:"RECOMENDACI\xd3N",type:"info",children:[(0,o.jsxs)(n.p,{children:["Se recomienda ejecutar ",(0,o.jsx)(n.code,{children:"stopListening()"})," en ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"onStop()"})})," de una ",(0,o.jsx)(n.code,{children:"Activity"})," o ",(0,o.jsx)(n.code,{children:"Fragment"})," para liberar recursos:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Override\nprotected void onStop() {\n    super.onStop();\n    stopListening();\n}\n"})})]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var s=i(6540);const o={},c=s.createContext(o);function a(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);