"use strict";(self.webpackChunkpmdm=self.webpackChunkpmdm||[]).push([[8421],{7850:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>t});const a=JSON.parse('{"id":"pia_2526/ut2_python_para_ia/estructuras-datos/5-1-listas","title":"Listas","description":"Las listas en Python son colecciones ordenadas y modificables (mutables), que permiten elementos de cualquier tipo","source":"@site/docs/01_pia_2526/ut2_python_para_ia/5-estructuras-datos/5-1-listas.md","sourceDirName":"01_pia_2526/ut2_python_para_ia/5-estructuras-datos","slug":"/pia_2526/ut2_python_para_ia/estructuras-datos/5-1-listas","permalink":"/DevTacora/docs/pia_2526/ut2_python_para_ia/estructuras-datos/5-1-listas","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Listas","sidebar_position":1,"description":"Las listas en Python son colecciones ordenadas y modificables (mutables), que permiten elementos de cualquier tipo","keywords":["Python","estructuras de datos","listas"]},"sidebar":"pia_2526_Sidebar","previous":{"title":"Estructuras de datos","permalink":"/DevTacora/docs/category/estructuras-de-datos"},"next":{"title":"Tuplas","permalink":"/DevTacora/docs/pia_2526/ut2_python_para_ia/estructuras-datos/5-2-tuplas"}}');var i=s(74848),r=s(28453);const o={title:"Listas",sidebar_position:1,description:"Las listas en Python son colecciones ordenadas y modificables (mutables), que permiten elementos de cualquier tipo",keywords:["Python","estructuras de datos","listas"]},l=void 0,c={},t=[{value:"C\xf3mo crear una lista",id:"c\xf3mo-crear-una-lista",level:3},{value:"Acceso a elementos con \xedndices positivos",id:"acceso-a-elementos-con-\xedndices-positivos",level:3},{value:"Acceso con \xedndices negativos",id:"acceso-con-\xedndices-negativos",level:3},{value:"Acceso con bucles",id:"acceso-con-bucles",level:3},{value:"Desempaquetado de listas",id:"desempaquetado-de-listas",level:3},{value:"\ud83d\udd39 Ignorar valores con <code>_</code>",id:"-ignorar-valores-con-_",level:4},{value:"\ud83d\udd39 Desempaquetado extendido con <code>*</code>",id:"-desempaquetado-extendido-con-",level:4},{value:"Slicing (rebanado)",id:"slicing-rebanado",level:3},{value:"Modificar listas",id:"modificar-listas",level:3},{value:"Comprobar si un elemento est\xe1 en la lista",id:"comprobar-si-un-elemento-est\xe1-en-la-lista",level:3},{value:"A\xf1adir elementos",id:"a\xf1adir-elementos",level:3},{value:"Eliminar elementos",id:"eliminar-elementos",level:3},{value:"Copiar una lista",id:"copiar-una-lista",level:3},{value:"Ordenar listas",id:"ordenar-listas",level:3},{value:"1) <code>lista.sort()</code>",id:"1-listasort",level:4},{value:"2) <code>sorted(iterable)</code>",id:"2-sortediterable",level:4},{value:"Comprensiones (comprehension)",id:"comprensiones-comprehension",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Son colecciones ",(0,i.jsx)(n.strong,{children:"ordenadas y modificables"})," (mutables)."]}),"\n",(0,i.jsx)(n.li,{children:"Permiten elementos de cualquier tipo (n\xfameros, cadenas, incluso otras listas)."}),"\n",(0,i.jsxs)(n.li,{children:["Se definen con corchetes ",(0,i.jsx)(n.code,{children:"[]"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"c\xf3mo-crear-una-lista",children:"C\xf3mo crear una lista"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'lista_vacia = [] \nnumeros = [1, 2, 3, 4, 5]\nmixta = [1, "Hola", True, 3.5]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"acceso-a-elementos-con-\xedndices-positivos",children:"Acceso a elementos con \xedndices positivos"}),"\n",(0,i.jsxs)(n.p,{children:["Los \xedndices empiezan en ",(0,i.jsx)(n.code,{children:"0"})," para el primer elemento."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'nombres = ["Ana", "Luis", "Marta"]\nprint(nombres[0])   # Ana\nprint(nombres[1])   # Luis\n'})}),"\n",(0,i.jsx)(n.h3,{id:"acceso-con-\xedndices-negativos",children:"Acceso con \xedndices negativos"}),"\n",(0,i.jsx)(n.p,{children:"Los \xedndices negativos cuentan desde el final."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"print(nombres[-1])  # Marta (\xfaltimo elemento)\nprint(nombres[-2])  # Luis\n"})}),"\n",(0,i.jsx)(n.h3,{id:"acceso-con-bucles",children:"Acceso con bucles"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for nombre in nombres:\n    print(nombre)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"desempaquetado-de-listas",children:"Desempaquetado de listas"}),"\n",(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"desempaquetado"})," permite ",(0,i.jsx)(n.strong,{children:"asignar varios valores de una lista (o de cualquier iterable)"})," directamente a varias variables en una sola l\xednea."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"valores = [10, 20, 30]\na, b, c = valores\nprint(a, b, c)  \n# 10 20 30\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"-ignorar-valores-con-_",children:["\ud83d\udd39 Ignorar valores con ",(0,i.jsx)(n.code,{children:"_"})]}),"\n",(0,i.jsxs)(n.p,{children:["Si no te interesa un valor de la lista, puedes descartarlo usando el ",(0,i.jsxs)(n.strong,{children:["guion bajo ",(0,i.jsx)(n.code,{children:"_"})]}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"valores = [1, 2, 3]\na, _, c = valores\nprint(a, c)  # 1 3\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"-desempaquetado-extendido-con-",children:["\ud83d\udd39 Desempaquetado extendido con ",(0,i.jsx)(n.code,{children:"*"})]}),"\n",(0,i.jsxs)(n.p,{children:["Cuando no sabes cu\xe1ntos elementos hay o quieres agrupar varios en una sola variable, puedes usar ",(0,i.jsx)(n.code,{children:"*"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"valores = [10, 20, 30, 40, 50]\n\na, *medio, b = valores\nprint(a)      # 10\nprint(medio)  # [20, 30, 40]\nprint(b)      # 50\n"})}),"\n",(0,i.jsx)(n.h3,{id:"slicing-rebanado",children:"Slicing (rebanado)"}),"\n",(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"slicing"})," permite obtener ",(0,i.jsx)(n.strong,{children:"sublistas"})," (o subsecuencias en general, porque tambi\xe9n funciona en strings y tuplas).\nLa sintaxis es:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"lista[inicio:fin:paso]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"inicio"})," \u2192 \xedndice desde el que empieza (incluido)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"fin"})," \u2192 \xedndice hasta el que llega (excluido)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"paso"})," \u2192 salto entre elementos (por defecto es 1)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"nombres = [\"Ana\", \"Luis\", \"Marta\", \"Juan\", \"Luc\xeda\"]\n\nprint(nombres[0:2])   # ['Ana', 'Luis']\nprint(nombres[1:4])   # ['Luis', 'Marta', 'Juan']\nprint(nombres[:3])    # ['Ana', 'Luis', 'Marta']   (inicio impl\xedcito en 0)\nprint(nombres[2:])    # ['Marta', 'Juan', 'Luc\xeda'] (fin impl\xedcito en \xfaltimo)\nprint(nombres[:])     # ['Ana', 'Luis', 'Marta', 'Juan', 'Luc\xeda'] (copia completa)\n\n# El tercer par\xe1metro controla el **salto** entre elementos.\nprint(nombres[::2])   # ['Ana', 'Marta', 'Luc\xeda'] (de dos en dos)\nprint(nombres[1::2])  # ['Luis', 'Juan'] (empieza en 1 y salta de dos en dos)\n\n# Se pueden usar \xedndices negativos para contar desde el final.\nprint(nombres[-3:])   # ['Marta', 'Juan', 'Luc\xeda']\nprint(nombres[:-2])   # ['Ana', 'Luis', 'Marta']\n"})}),"\n",(0,i.jsx)(n.h3,{id:"modificar-listas",children:"Modificar listas"}),"\n",(0,i.jsx)(n.p,{children:"Como son mutables, se pueden cambiar elementos."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"nombres[1] = \"Luc\xeda\"\nprint(nombres)  # ['Ana', 'Luc\xeda', 'Marta']\n"})}),"\n",(0,i.jsx)(n.h3,{id:"comprobar-si-un-elemento-est\xe1-en-la-lista",children:"Comprobar si un elemento est\xe1 en la lista"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("Ana" in nombres)     # True\nprint("Pedro" not in nombres) # True\n'})}),"\n",(0,i.jsx)(n.h3,{id:"a\xf1adir-elementos",children:"A\xf1adir elementos"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Con ",(0,i.jsx)(n.code,{children:"append()"}),": al final de la lista."]}),"\n",(0,i.jsxs)(n.li,{children:["Con ",(0,i.jsx)(n.code,{children:"insert(i, x)"}),": en una posici\xf3n concreta."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"nombres.append(\"Juan\")\nprint(nombres)  # ['Ana','Luc\xeda','Marta','Juan']\n\nnombres.insert(1, \"Pedro\")\nprint(nombres)  # ['Ana','Pedro','Luc\xeda','Marta','Juan']\n"})}),"\n",(0,i.jsx)(n.h3,{id:"eliminar-elementos",children:"Eliminar elementos"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"remove(x)"})," \u2192 elimina el valor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pop(i)"})," \u2192 elimina y devuelve el valor en la posici\xf3n (\xfaltimo por defecto)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"del lista[i]"})," \u2192 elimina el valor en la posici\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"clear()"})," \u2192 vac\xeda la lista."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"nombres.remove(\"Pedro\")\nprint(nombres)\n\nnombres.pop(0)  # elimina 'Ana'\nprint(nombres)\n\ndel nombres[-1] # elimina el \xfaltimo\nprint(nombres)\n\nnombres.clear()\nprint(nombres)  # []\n"})}),"\n",(0,i.jsx)(n.h3,{id:"copiar-una-lista",children:"Copiar una lista"}),"\n",(0,i.jsxs)(n.p,{children:["En Python, si hacemos una asignaci\xf3n directa (lista2 = lista1), ",(0,i.jsx)(n.strong,{children:"no se crea una nueva lista"}),", sino que ambas variables apuntan al mismo objeto en memoria."]}),"\n",(0,i.jsxs)(n.p,{children:["Las formas correctas de realizar una copia de una lista en Python son con el m\xe9todo ",(0,i.jsx)(n.code,{children:".copy()"})," o con el constructor ",(0,i.jsx)(n.code,{children:"list()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"lista1 = [1, 2, 3]\nlista2 = lista1.copy()\nlista3 = list(lista1)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ordenar-listas",children:"Ordenar listas"}),"\n",(0,i.jsxs)(n.p,{children:["Python ofrece ",(0,i.jsx)(n.strong,{children:"dos formas"})," principales de ordenar:"]}),"\n",(0,i.jsxs)(n.h4,{id:"1-listasort",children:["1) ",(0,i.jsx)(n.code,{children:"lista.sort()"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Es un ",(0,i.jsx)(n.strong,{children:"m\xe9todo"})," de las listas."]}),"\n",(0,i.jsxs)(n.li,{children:["Ordena la ",(0,i.jsx)(n.strong,{children:"lista original"})," \u2192 la modifica en el sitio (",(0,i.jsx)(n.em,{children:"in-place"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No devuelve nada"})," (",(0,i.jsx)(n.code,{children:"None"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"numeros = [4, 2, 9, 1]\nnumeros.sort()\nprint(numeros)   # [1, 2, 4, 9]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Si queremos orden descendente:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"numeros.sort(reverse=True)\nprint(numeros)   # [9, 4, 2, 1]\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"2-sortediterable",children:["2) ",(0,i.jsx)(n.code,{children:"sorted(iterable)"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Es una ",(0,i.jsx)(n.strong,{children:"funci\xf3n integrada"})," (no solo de listas, sirve para cualquier iterable: tuplas, cadenas, diccionarios\u2026)."]}),"\n",(0,i.jsxs)(n.li,{children:["Devuelve una ",(0,i.jsx)(n.strong,{children:"nueva lista ordenada"})," y deja intacto el iterable original."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Ejemplo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'numeros = [4, 2, 9, 1]\nordenados = sorted(numeros)\n\nprint("Original:", numeros)    # [4, 2, 9, 1]\nprint("Ordenados:", ordenados) # [1, 2, 4, 9]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Tambi\xe9n permite ordenar descendente:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"ordenados = sorted(numeros, reverse=True)\nprint(ordenados)  # [9, 4, 2, 1]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"comprensiones-comprehension",children:"Comprensiones (comprehension)"}),"\n",(0,i.jsxs)(n.p,{children:["Las ",(0,i.jsx)(n.strong,{children:"comprensiones de listas"})," permiten crear listas nuevas a partir de una secuencia (o cualquier iterable) en una sola l\xednea, de forma concisa y legible."]}),"\n",(0,i.jsx)(n.p,{children:"Sintaxis:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[expresion for elemento in iterable if condicion]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Ejemplos:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Lista de cuadrados\ncuadrados = [x**2 for x in range(5)]\nprint(cuadrados)  # [0, 1, 4, 9, 16]\n\n# Filtrar n\xfameros pares\npares = [x for x in range(10) if x % 2 == 0]\nprint(pares)  # [0, 2, 4, 6, 8]\n\n# Transformar texto\npalabras = ["Hola", "Python", "IA"]\nlongitudes = [len(p) for p in palabras]\nprint(longitudes)  # [4, 6, 2]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var a=s(96540);const i={},r=a.createContext(i);function o(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);