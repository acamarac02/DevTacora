"use strict";(self.webpackChunkpmdm=self.webpackChunkpmdm||[]).push([[4792],{1356:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>j,frontMatter:()=>c,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"ada/ut5_bbdd_nosql/mongodb/conexion-java","title":"Conexi\xf3n desde Java","description":"En este apartado vamos a conectar con nuestra base de datos MongoDB (desplegada en Atlas) desde Java, usando Maven como gestor de dependencias. Ten en cuenta que MongoDB ofrece dos formas de trabajo:","source":"@site/docs/ada/ut5_bbdd_nosql/mongodb/3-conexion-java.mdx","sourceDirName":"ada/ut5_bbdd_nosql/mongodb","slug":"/ada/ut5_bbdd_nosql/mongodb/conexion-java","permalink":"/DevTacora/docs/ada/ut5_bbdd_nosql/mongodb/conexion-java","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Conexi\xf3n desde Java","title":"Conexi\xf3n desde Java"},"sidebar":"adaSidebar","previous":{"title":"Lenguaje de consulta","permalink":"/DevTacora/docs/ada/ut5_bbdd_nosql/mongodb/lenguaje-de-consulta"},"next":{"title":"Dise\xf1o documental","permalink":"/DevTacora/docs/ada/ut5_bbdd_nosql/mongodb/diseno-documental"}}');var r=s(4848),o=s(8453),l=s(1470),i=s(9365);const c={sidebar_position:4,sidebar_label:"Conexi\xf3n desde Java",title:"Conexi\xf3n desde Java"},d=void 0,t={},u=[{value:"Configuraci\xf3n del proyecto",id:"configuraci\xf3n-del-proyecto",level:2},{value:"Mapeo de JSON a clases Java",id:"mapeo-de-json-a-clases-java",level:2},{value:"<strong>Clase Principal (<code>Person</code>)</strong>",id:"clase-principal-person",level:4},{value:"<strong>Clase Secundaria (<code>Address</code>)</strong>",id:"clase-secundaria-address",level:4},{value:"Operaciones CRUD",id:"operaciones-crud",level:2},{value:"1. Acceder a la BD y a la colecci\xf3n",id:"1-acceder-a-la-bd-y-a-la-colecci\xf3n",level:3},{value:"2. Crear (Insertar documentos)",id:"2-crear-insertar-documentos",level:3},{value:"3. Leer (Consultar documentos)",id:"3-leer-consultar-documentos",level:3},{value:"<strong>Filtrar por igualdad</strong>",id:"filtrar-por-igualdad",level:4},{value:"<strong>Filtrar por m\xfaltiples campos</strong>",id:"filtrar-por-m\xfaltiples-campos",level:4},{value:"4. Actualizar (Modificar documentos)",id:"4-actualizar-modificar-documentos",level:3},{value:"5. Eliminar (Borrar documentos)",id:"5-eliminar-borrar-documentos",level:3},{value:"Ejemplo completo",id:"ejemplo-completo",level:2},{value:"Ejercicio",id:"ejercicio",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)("div",{class:"justify-text",children:[(0,r.jsxs)(n.p,{children:["En este apartado vamos a conectar con nuestra base de datos MongoDB (desplegada en Atlas) desde Java, usando ",(0,r.jsx)(n.code,{children:"Maven"})," como gestor de dependencias. Ten en cuenta que MongoDB ofrece ",(0,r.jsx)(n.strong,{children:"dos formas de trabajo"}),":"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trabajar directamente con documentos JSON"})," (clase ",(0,r.jsx)(n.code,{children:"Document"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mapear los documentos JSON en POJOs"})," (Plan Old Java Object)"]}),"\n"]}),(0,r.jsx)(n.p,{children:"Por sencillez, nosotros optaremos por la \xfaltima opci\xf3n."}),(0,r.jsx)(n.h2,{id:"configuraci\xf3n-del-proyecto",children:"Configuraci\xf3n del proyecto"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Crea un nuevo proyecto en IntelliJ y selecciona Maven como gestor de depencias."})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Configura Maven"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Abre tu archivo ",(0,r.jsx)(n.code,{children:"pom.xml"})," y a\xf1ade la dependencia para el controlador de MongoDB."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    <dependency>\n        <groupId>org.mongodb</groupId>\n        <artifactId>mongodb-driver-sync</artifactId>\n        <version>5.3.0</version> \x3c!-- Verifica la versi\xf3n m\xe1s reciente en Maven Central --\x3e\n    </dependency>\n</dependencies>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Guarda el archivo ",(0,r.jsx)(n.code,{children:"pom.xml"})," y sincroniza para que se descarguen las dependencias."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Obt\xe9n la cadena de conexi\xf3n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Ve a [MongoDB Atlas] y a\xf1ade tu nueva base de datos o reutiliza una de las que ya tengas creada."}),"\n",(0,r.jsxs)(n.li,{children:["Obt\xe9n la cadena de conexi\xf3n:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Haz clic en el bot\xf3n ",(0,r.jsx)(n.strong,{children:"Connect"})," del cl\xfaster."]}),"\n",(0,r.jsxs)(n.li,{children:["Selecciona ",(0,r.jsx)(n.strong,{children:"Drivers"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Selecciona Java como lenguaje de programaci\xf3n."}),"\n",(0,r.jsxs)(n.li,{children:["Copia la cadena de conexi\xf3n proporcionada. Por ejemplo:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mongodb+srv://<db_user>:<db_password>@<cluster>.mongodb.net/?retryWrites=true&w=majority&appName=ClusterADA\n"})}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Recuerda reemplazar db_user, db_password y cluster por tu usuario, contrase\xf1a y nombre de tu cl\xfaster."}),"\n",(0,r.jsxs)(n.li,{children:["Ten en cuenta que con esa cadena de conexi\xf3n tienes acceso a cualquier base de datos de tu cl\xfaster. Deber\xe1s especificar una de ellas con un comando Java, similar a cuando ejecut\xe1bamos ",(0,r.jsx)(n.code,{children:"use database"})," en ",(0,r.jsx)(n.code,{children:"Mongosh"}),"."]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Establecer la conexi\xf3n desde Java"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["La conexi\xf3n con MongoDB se establece con las siguientes l\xedneas:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// URI de conexi\xf3n obtenida de MongoDB Atlas\nString uri = "mongodb+srv://<db_user>:<db_password>@<cluster>.mongodb.net/?retryWrites=true&w=majority&appName=ClusterADA";\n\n// Configurar el PojoCodecProvider para traducir autom\xe1ticamente entre documentos BSON\n// y clases Java personalizadas\nCodecRegistry pojoCodecRegistry = fromRegistries(\n        MongoClientSettings.getDefaultCodecRegistry(),\n        fromProviders(PojoCodecProvider.builder().automatic(true).build())\n);\n\n// Creamos la configuraci\xf3n del cliente, especificando la URI de conexi\xf3n\n// y el traductor de BSON a Java\nMongoClientSettings settings = MongoClientSettings.builder()\n        .applyConnectionString(new com.mongodb.ConnectionString(uri))\n        .codecRegistry(pojoCodecRegistry)\n        .build();\n\n// Este cliente es el punto de entrada principal para interactuar con MongoDB.\n// Una vez creado, puedes usarlo para obtener bases de datos y colecciones,\n// realizar consultas, insertar datos, etc.\nMongoClient mongoClient = MongoClients.create(settings);\n'})}),"\n"]}),"\n"]}),(0,r.jsx)(n.admonition,{title:"BUENAS PR\xc1CTICAS",type:"info",children:(0,r.jsxs)(n.p,{children:["Ten en cuenta que la ",(0,r.jsx)(n.strong,{children:"cadena de conexi\xf3n"})," no deber\xeda estar en el c\xf3digo Java, ya que en ella se encuentran datos sensibles como usuarios y contrase\xf1as. En cambio, deber\xedan utilizarse ",(0,r.jsx)(n.strong,{children:"ficheros properties"})," para almacenar dichos datos."]})}),(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["C\xf3digo de ejemplo para comprobar si hay conexi\xf3n:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Main.java"',children:'public class Main {\n    public static void main(String[] args) {\n        // URI de conexi\xf3n obtenida de MongoDB Atlas\n        String uri = "mongodb+srv://<db_user>:<db_password>@<cluster>.mongodb.net/?retryWrites=true&w=majority&appName=ClusterADA";\n\n        CodecRegistry pojoCodecRegistry = fromRegistries(\n                MongoClientSettings.getDefaultCodecRegistry(),\n                fromProviders(PojoCodecProvider.builder().automatic(true).build())\n        );\n\n        MongoClientSettings settings = MongoClientSettings.builder()\n                .applyConnectionString(new com.mongodb.ConnectionString(uri))\n                .codecRegistry(pojoCodecRegistry)\n                .build();\n\n        MongoClient mongoClient = MongoClients.create(settings);\n\n        // Enviamos un ping para comprobar que hay conexi\xf3n\n        MongoDatabase database = mongoClient.getDatabase("admin");\n        Document resultado = database.runCommand(new Document("ping", 1));\n        System.out.println("Resultado del ping: " + resultado.toJson());\n\n        // \xa1\xa1\xa1 NO OLVIDES CERRAR LA CONEXI\xd3N !!!\n        mongoClient.close();\n    }\n}\n'})}),"\n"]}),"\n"]}),(0,r.jsxs)(n.admonition,{title:"CUIDADO",type:"danger",children:[(0,r.jsxs)(n.p,{children:["Es ",(0,r.jsx)(n.strong,{children:"altamente recomendable"})," usar un ",(0,r.jsx)(n.strong,{children:"try-with-resources"})," para gestionar la instancia de ",(0,r.jsx)(n.code,{children:"MongoClient"}),". La raz\xf3n principal es que ",(0,r.jsx)(n.code,{children:"MongoClient"})," implementa la interfaz ",(0,r.jsx)(n.code,{children:"Closeable"}),", lo que significa que tiene recursos subyacentes (como conexiones de red) que deben ser cerrados de forma expl\xedcita para evitar fugas de recursos."]}),(0,r.jsxs)(n.p,{children:["Cuando usas un ",(0,r.jsx)(n.strong,{children:"try-with-resources"}),", el cliente se cerrar\xe1 autom\xe1ticamente al final del bloque, incluso si ocurre una excepci\xf3n, lo que garantiza que los recursos sean liberados correctamente."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'try (MongoClient mongoClient = MongoClients.create(settings)) {\n    MongoDatabase database = mongoClient.getDatabase("myDatabase");\n    // Realizar operaciones con la base de datos\n    System.out.println("Conexi\xf3n exitosa a la base de datos: " + database.getName());\n}\n'})}),(0,r.jsx)(n.p,{children:"No obstante, establecer una conexi\xf3n a la base de datos cada vez que quieras realizar una operaci\xf3n puede ser costoso en t\xe9rminos de rendimiento, especialmente si las operaciones son frecuentes. Por ello, el mejor enfoque depende del caso de uso de la aplicaci\xf3n que se est\xe9 desarrollando:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Si est\xe1s creando un script o una aplicaci\xf3n peque\xf1a que ejecuta una tarea espec\xedfica y luego finaliza, puedes usar un ",(0,r.jsx)(n.code,{children:"MongoClient"})," dentro de un bloque ",(0,r.jsx)(n.strong,{children:"try-with-resources"})," para garantizar que los recursos se liberen al terminar."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["En una aplicaci\xf3n de larga duraci\xf3n (como un servidor backend), no es eficiente crear y cerrar una nueva instancia de ",(0,r.jsx)(n.code,{children:"MongoClient"})," para cada operaci\xf3n. En lugar de eso:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Crea una instancia \xfanica de ",(0,r.jsx)(n.code,{children:"MongoClient"})," al inicio de tu aplicaci\xf3n (singleton o mediante un patr\xf3n similar)."]})}),"\n",(0,r.jsx)(n.li,{children:"Usa esa misma instancia durante toda la vida de la aplicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Aseg\xfarate de cerrar el cliente solo cuando la aplicaci\xf3n se apague."}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ejemplo:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MongoDBRepository.java"',children:'public class MongoDBRepository {\n\n    private static MongoDBRepository instance;\n    private MongoClient mongoClient;\n\n    private MongoDBRepository() {\n        String uri = "mongodb+srv://root:root@clusterada.jkri7.mongodb.net/?retryWrites=true&w=majority&appName=ClusterADA";\n\n        CodecRegistry pojoCodecRegistry = fromRegistries(\n                MongoClientSettings.getDefaultCodecRegistry(),\n                fromProviders(PojoCodecProvider.builder().automatic(true).build())\n        );\n\n        MongoClientSettings settings = MongoClientSettings.builder()\n                .applyConnectionString(new com.mongodb.ConnectionString(uri))\n                .codecRegistry(pojoCodecRegistry)\n                .build();\n\n        mongoClient = MongoClients.create(settings);\n    }\n\n    // M\xe9todo para obtener el cliente\n    public static MongoDBRepository getInstance() {\n        if (instance == null) {\n            instance = new MongoDBRepository();\n        }\n        return instance;\n    }\n\n    // M\xe9todo para cerrar el cliente al apagar la aplicaci\xf3n\n    public void closeMongoClient() {\n        if (mongoClient != null) {\n            mongoClient.close();\n        }\n    }\n}\n'})})]}),(0,r.jsx)(n.h2,{id:"mapeo-de-json-a-clases-java",children:"Mapeo de JSON a clases Java"}),(0,r.jsxs)(n.p,{children:["Supongamos que tu coleccion ",(0,r.jsx)(n.code,{children:"empleados"})," almacena documentos con el siguiente formato:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "_id": ObjectId(\'678153c134ea7483b01a4e62\'),\n  "full_name": "John Doe",\n  "age": 30,\n  "address": {\n    "city": "New York",\n    "zipcode": "10001"\n  },\n  "skills": ["Java", "MongoDB", "REST APIs"]\n}\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Analizar la estructura del JSON"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Llaves principales (nivel superior):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"full_name"}),": Es un ",(0,r.jsx)(n.strong,{children:"String"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"age"}),": Es un ",(0,r.jsx)(n.strong,{children:"int"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"address"}),": Es un ",(0,r.jsx)(n.strong,{children:"objeto"})," que contiene otros valores."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"skills"}),": Es un ",(0,r.jsx)(n.strong,{children:"array de Strings"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Subestructura (objeto anidado):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"address"})," tiene:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"city"}),": Es un ",(0,r.jsx)(n.strong,{children:"String"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"zipcode"}),": Es un ",(0,r.jsx)(n.strong,{children:"String"})," (podr\xeda ser un entero pero no se suelen realizar operaciones num\xe9ricas sobre c\xf3digos postales)."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2. Crear las clases Java"}),"\nDebes crear una clase para cada objeto o subestructura en el JSON. Las listas se implementar\xe1n como ",(0,r.jsx)(n.code,{children:"List<TipoDato>"}),"."]}),(0,r.jsx)(n.h4,{id:"clase-principal-person",children:(0,r.jsxs)(n.strong,{children:["Clase Principal (",(0,r.jsx)(n.code,{children:"Person"}),")"]})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Person {\n\n    private ObjectId id;\n    @BsonProperty(value = "full_name")\n    private String fullName;\n    private int age;\n    private Address address; // Objeto anidado\n    private List<String> skills; // Lista de Strings\n\n    // Getters y setters\n\n}\n'})}),(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["La clave principal ",(0,r.jsx)(n.code,{children:"_id"})," es un objeto de tipo ObjectId en Java."]}),"\n",(0,r.jsx)(n.li,{children:"Las clases siempre deben tener el constructor por defecto (adem\xe1s de todos los parametrizados que necesites)."}),"\n",(0,r.jsxs)(n.li,{children:["La anotaci\xf3n ",(0,r.jsx)(n.code,{children:'@BsonProperty(value = "full_name")'}),' permite usar un nombre diferente entre el campo JSON y el atributo Java. En este caso, se utuliza para evitar violar las convenciones de nomenclatura de Java para variables, getters y setters. Le indicamos al mapeador que queremos que el campo "full_name" en JSON se mapee al campo "fullName" en Java. Para usar la anotaci\xf3n tendr\xe1s que a\xf1adir la siguiente dependencia:']}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.mongodb</groupId>\n    <artifactId>bson</artifactId>\n    <version>5.3.0</version>\n</dependency>\n"})})]}),(0,r.jsx)(n.h4,{id:"clase-secundaria-address",children:(0,r.jsxs)(n.strong,{children:["Clase Secundaria (",(0,r.jsx)(n.code,{children:"Address"}),")"]})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Address.java"',children:"public class Address {\n\n    private String city;\n    private String zipcode;\n\n    // Getters y setters\n\n}\n"})}),(0,r.jsxs)(n.admonition,{title:"CAMPOS DE FECHAS",type:"info",children:[(0,r.jsxs)(n.p,{children:["Si defines un campo de tipo ",(0,r.jsx)(n.code,{children:"LocalDate"})," en una clase Java que est\xe1s utilizando para interactuar con MongoDB, debes tener en cuenta algunos detalles sobre c\xf3mo se maneja este tipo de datos:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["El tipo ",(0,r.jsx)(n.code,{children:"LocalDate"})," es parte del paquete ",(0,r.jsx)(n.code,{children:"java.time"})," y representa una fecha (sin hora) en el formato ISO-8601, como ",(0,r.jsx)(n.code,{children:"2025-01-23"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["MongoDB no tiene un tipo de datos espec\xedfico para ",(0,r.jsx)(n.code,{children:"LocalDate"}),". En cambio, los valores de fecha y hora se almacenan como ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Date"})})," (tipo BSON) en la base de datos. Esto representa tanto la fecha como la hora en milisegundos desde el epoch (",(0,r.jsx)(n.code,{children:"1970-01-01T00:00:00Z"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["MongoDB intentar\xe1 serializar y deserializar autom\xe1ticamente los campos de tipo ",(0,r.jsx)(n.code,{children:"LocalDate"}),". Sin embargo:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Al serializar (",(0,r.jsx)(n.code,{children:"LocalDate"})," \u2192 BSON):"]})," Se convierte a una fecha BSON (",(0,r.jsx)(n.code,{children:"Date"}),") con la hora establecida en ",(0,r.jsx)(n.code,{children:"00:00:00.000"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Al deserializar (",(0,r.jsx)(n.code,{children:"BSON \u2192 LocalDate"}),"):"]})," La hora ser\xe1 ignorada, y solo se utilizar\xe1 la parte de la fecha."]}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["Por tanto, usa ",(0,r.jsx)(n.code,{children:"LocalDate"})," cuando necesites trabajar solo con fechas (sin horas) en tu l\xf3gica de negocio y si necesitas almacenar o trabajar con fechas y horas, utiliza ",(0,r.jsx)(n.code,{children:"LocalDateTime"}),"."]})]}),(0,r.jsx)(n.h2,{id:"operaciones-crud",children:"Operaciones CRUD"}),(0,r.jsx)(n.h3,{id:"1-acceder-a-la-bd-y-a-la-colecci\xf3n",children:"1. Acceder a la BD y a la colecci\xf3n"}),(0,r.jsxs)(n.p,{children:["Antes de operar, es necesario indicar la base de datos con la que vamos a trabajar (similar a ",(0,r.jsx)(n.code,{children:"use database"}),") y la colecci\xf3n."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Recuperamos la base de datos\nMongoDatabase database = mongoClient.getDatabase("empresa");\n\n// Recuperamos la colecci\xf3n, indicando que devuelve objetos de tipo Person\nMongoCollection<Person> collection = database.getCollection("empleados", Person.class);\n'})}),(0,r.jsx)(n.h3,{id:"2-crear-insertar-documentos",children:"2. Crear (Insertar documentos)"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Si solo queremos insertar un documento, usaremos el m\xe9todo ",(0,r.jsx)(n.code,{children:"db.insertOne()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Address direccion = new Address("C\xe1ceres", "10004");\n    \nList<String> skills = new ArrayList<>();\nskills.add("Java");\nskills.add("MongoDB");\n    \nPerson p = new Person("Pedro P\xe9rez", 30, direccion, skills); \n    \n// Insertamos la persona\ncollection.insertOne(p);\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Si necesitas insertar varios documentos a la vez, usaremos el m\xe9todo ",(0,r.jsx)(n.code,{children:"db.insertMany()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Address direccion1 = new Address("Madrid", "28001");\nAddress direccion2 = new Address("Barcelona", "08001");\n\nList<String> skills1 = new ArrayList<>();\nskills1.add("Java");\nskills1.add("MongoDB");\n\nList<String> skills2 = new ArrayList<>();\nskills2.add("Python");\nskills2.add("Data Analysis");\n\n// Crear personas\nPerson p1 = new Person("Mar\xeda L\xf3pez", 28, direccion1, skills1);\nPerson p2 = new Person("Carlos Garc\xeda", 35, direccion2, skills2);\n\n// A\xf1adir personas a una lista\nList<Person> listaPersonas = new ArrayList<>();\npersonas.add(p1);\npersonas.add(p2);\n\ncollection.insertMany(listaPersonas);\n'})}),"\n"]}),"\n"]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"3-leer-consultar-documentos",children:"3. Leer (Consultar documentos)"}),(0,r.jsxs)(n.p,{children:["Para recuperar los documentos utilizaremos el m\xe9todo ",(0,r.jsx)(n.code,{children:".find()"}),". Este m\xe9todo permite generar un ",(0,r.jsx)(n.code,{children:"iterator"}),", que convierte los resultados de la consulta en un cursor (MongoCursor), que permite iterar sobre los documentos uno por uno."]}),(0,r.jsx)(n.p,{children:"El cursor ofrece dos m\xe9todos:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasNext()"}),": Verifica si hay m\xe1s documentos disponibles en el cursor."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"next()"}),": Recupera el siguiente documento del cursor y lo convierte en un objeto de tipo Person."]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'MongoDatabase database = mongoClient.getDatabase("empresa");\nMongoCollection<Person> collection = database.getCollection("empleados", Person.class);\n\n// Leer documentos de MongoDB y convertirlos en POJOs\n// Aqu\xed puedes a\xf1adirlos a otra lista o procesarlos como necesites...\ntry (MongoCursor<Person> cursor = collection.find().iterator()) {\n    while (cursor.hasNext()) {\n        Person currentPerson = cursor.next();\n        System.out.println(currentPerson);\n    }\n} catch (MongoException me) {\n    System.err.println("Error al buscar empleados: " + me);\n}\n'})}),(0,r.jsxs)(n.p,{children:["Las consultas de MongoDB se convierten en objetos ",(0,r.jsx)(n.code,{children:"Filters"})," proporcionados por la clase ",(0,r.jsx)(n.code,{children:"com.mongodb.client.model.Filters"}),", es decir, las consultas que normalmente escribir\xedas en el shell de MongoDB (en formato JSON) se traducen a m\xe9todos est\xe1ticos de la clase ",(0,r.jsx)(n.code,{children:"Filters"}),". Esta clase ofrece una API que te permite construir consultas de forma sencilla y tipada."]}),(0,r.jsxs)(n.p,{children:["Algunos m\xe9todos comunes de ",(0,r.jsx)(n.code,{children:"Filters"})," y su equivalente en MongoDB Shell son:"]}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsxs)(n.strong,{children:["M\xe9todo en ",(0,r.jsx)(n.code,{children:"Filters"})]})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Descripci\xf3n"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Ejemplo MongoDB Shell"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Ejemplo en Java"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"eq(field, value)"})}),(0,r.jsx)(n.td,{children:"Filtro por igualdad"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "title": "Inception" }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'eq("title", "Inception")'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ne(field, value)"})}),(0,r.jsx)(n.td,{children:"No igual"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "title": { "$ne": "Inception" } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'ne("title", "Inception")'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"gt(field, value)"})}),(0,r.jsx)(n.td,{children:"Mayor que"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "rating": { "$gt": 8.0 } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'gt("rating", 8.0)'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lt(field, value)"})}),(0,r.jsx)(n.td,{children:"Menor que"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "rating": { "$lt": 5.0 } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'lt("rating", 5.0)'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"gte(field, value)"})}),(0,r.jsx)(n.td,{children:"Mayor o igual que"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "rating": { "$gte": 7.0 } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'gte("rating", 7.0)'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lte(field, value)"})}),(0,r.jsx)(n.td,{children:"Menor o igual que"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "rating": { "$lte": 9.0 } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'lte("rating", 9.0)'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"and(filter1, filter2, ...)"})}),(0,r.jsxs)(n.td,{children:['Combinar filtros con "y" l\xf3gico (',(0,r.jsx)(n.code,{children:"$and"}),")"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "$and": [{...}, {...}] }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"and(eq(...), gte(...))"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"or(filter1, filter2, ...)"})}),(0,r.jsxs)(n.td,{children:['Combinar filtros con "o" l\xf3gico (',(0,r.jsx)(n.code,{children:"$or"}),")"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "$or": [{...}, {...}] }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"or(eq(...), lt(...))"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"not(filter)"})}),(0,r.jsx)(n.td,{children:"Negar un filtro"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "rating": { "$not": { "$gt": 7.0 } } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'not(gt("rating", 7.0))'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"exists(field, boolean)"})}),(0,r.jsx)(n.td,{children:"Verificar si un campo existe o no"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "awards": { "$exists": true } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'exists("awards", true)'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"regex(field, regexPattern)"})}),(0,r.jsx)(n.td,{children:"Buscar coincidencias por expresi\xf3n regular"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'{ "title": { "$regex": "Jurassic" } }'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'regex("title", "Jurassic")'})})]})]})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Filtros B\xe1sicos"})}),(0,r.jsx)(n.h4,{id:"filtrar-por-igualdad",children:(0,r.jsx)(n.strong,{children:"Filtrar por igualdad"})}),(0,r.jsxs)(n.p,{children:["Buscar empleados con el nombre completo ",(0,r.jsx)(n.code,{children:'"Jane Smith"'}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(eq("full_name", "Jane Smith"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "full_name": "Jane Smith" })\n'})})})]}),(0,r.jsx)(n.h4,{id:"filtrar-por-m\xfaltiples-campos",children:(0,r.jsx)(n.strong,{children:"Filtrar por m\xfaltiples campos"})}),(0,r.jsxs)(n.p,{children:["Buscar empleados que vivan en ",(0,r.jsx)(n.code,{children:'"Los Angeles"'})," y tengan ",(0,r.jsx)(n.code,{children:"25 a\xf1os"}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(and(eq("address.city", "Los Angeles"), eq("age", 25)));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "address.city": "Los Angeles", "age": 25 })\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Operadores de Comparaci\xf3n"})}),(0,r.jsx)(n.p,{children:"Buscar los empleados mayores de 30 a\xf1os:"}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(gt("age", 30));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "age": { "$gt": 30 } })\n'})})})]}),(0,r.jsx)(n.p,{children:"Buscar los empleados con edades entre 20 y 35 a\xf1os:"}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(and(gte("age", 20), lte("age", 35)));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "age": { "$gte": 20, "$lte": 35 } })\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Operadores L\xf3gicos"})}),(0,r.jsxs)(n.p,{children:["Empleados con habilidades en ",(0,r.jsx)(n.code,{children:"Python"})," o que vivan en ",(0,r.jsx)(n.code,{children:'"C\xe1ceres"'}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(or(eq("skills", "Python"), eq("address.city", "C\xe1ceres")));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({\n  "$or": [\n    { "skills": "Python" },\n    { "address.city": "C\xe1ceres" }\n  ]\n})\n'})})})]}),(0,r.jsx)(n.p,{children:"Empleados que NO tienen m\xe1s de 30 a\xf1os:"}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(not(gt("age", 30)));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "age": { "$not": { "$gt": 30 } } })\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Consultas con Arrays"})}),(0,r.jsxs)(n.p,{children:["Buscar empleados que tengan ",(0,r.jsx)(n.code,{children:'"SQL"'})," en sus habilidades:"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(eq("skills", "SQL"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "skills": "SQL" })\n'})})})]}),(0,r.jsxs)(n.p,{children:["Buscar empleados que tengan ",(0,r.jsx)(n.code,{children:"Java"})," ",(0,r.jsx)(n.strong,{children:"y"})," ",(0,r.jsx)(n.code,{children:"MongoDB"})," como habilidades:"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(all("skills", Arrays.asList("Java", "MongoDB")))\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "skills": { "$all": ["Java", "MongoDB"] } })\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Proyecciones"})}),(0,r.jsxs)(n.p,{children:["Recuperar solo los campos ",(0,r.jsx)(n.code,{children:"full_name"})," y ",(0,r.jsx)(n.code,{children:"age"})," de los empleados que vivan en ",(0,r.jsx)(n.code,{children:'"Los Angeles"'}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(eq("address.city", "Los Angeles"))\n        .projection(fields(include("full_name", "age"), excludeId()));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find(\n  { "address.city": "Los Angeles" },\n  { "full_name": 1, "age": 1, "_id": 0 }\n)\n'})})})]}),(0,r.jsx)(n.admonition,{title:"CUIDADO",type:"warning",children:(0,r.jsxs)(n.p,{children:["El resto de campos que  no se ha recuperado contendr\xe1n el ",(0,r.jsxs)(n.strong,{children:["valor ",(0,r.jsx)(n.code,{children:"null"})]}),". Por este motivo es tan importante usar las ",(0,r.jsx)(n.strong,{children:"clases wrapper"})," (Integer, Double, etc.) en lugar de los tipos primitivos (int, double, ...) cuando ",(0,r.jsx)(n.strong,{children:"definimos el modelo"}),"."]})}),(0,r.jsxs)(n.p,{children:["Aqu\xed tienes los apartados faltantes actualizados con el formato de ",(0,r.jsx)(n.strong,{children:"tabs"})," y utilizando ",(0,r.jsx)(n.code,{children:"iterator"})," en lugar de ",(0,r.jsx)(n.code,{children:"forEach"})," para recorrer los documentos."]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ordenar Resultados"})}),(0,r.jsx)(n.p,{children:"Ordenar empleados por edad en orden descendente:"}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find().sort(new Document("age", -1));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find().sort({ "age": -1 })\n'})})})]}),(0,r.jsx)(n.admonition,{title:"INFO",type:"info",children:(0,r.jsxs)(n.p,{children:["Si deseas ordenar por ",(0,r.jsx)(n.strong,{children:"dos campos"})," en MongoDB usando Java, puedes pasar un documento al m\xe9todo ",(0,r.jsx)(n.code,{children:"sort()"})," que incluya los dos campos con sus respectivos \xf3rdenes."]})}),(0,r.jsx)(n.p,{children:"Ordenar empleados por edad en orden descendente y por nombre en caso de igualdad:"}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find().sort(new Document("age", -1).append("full_name", 1))\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find().sort({ "age": -1, "full_name": 1 })\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Limitar y Saltar Resultados"})}),(0,r.jsx)(n.p,{children:"Mostrar solo los primeros 3 empleados:"}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"collection.find().limit(3);\n"})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"db.empleados.find().limit(3)\n"})})})]}),(0,r.jsx)(n.p,{children:"Omitir los primeros 5 empleados:"}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"collection.find().skip(5);\n"})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"db.empleados.find().skip(5)\n"})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Buscar Documentos con Campos Existentes o Faltantes"})}),(0,r.jsxs)(n.p,{children:["Empleados que tienen el campo ",(0,r.jsx)(n.code,{children:"address"}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(exists("address", true));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "address": { "$exists": true } })\n'})})})]}),(0,r.jsxs)(n.p,{children:["Empleados que no tienen el campo ",(0,r.jsx)(n.code,{children:"skills"}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(exists("skills", false));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "skills": { "$exists": false } })\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Buscar Documentos con Substring"})}),(0,r.jsxs)(n.p,{children:["Empleados cuyo nombre contiene ",(0,r.jsx)(n.code,{children:'"Jane"'}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(regex("full_name", "Jane"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "full_name": { "$regex": "Jane" } })\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Operador $in"})}),(0,r.jsx)(n.p,{children:'Se utiliza para filtrar documentos que tienen un valor en un campo que coincide con uno de los valores en una lista especificada. Es equivalente a una cl\xe1usula "OR" en SQL, pero espec\xedfica para comparar un campo contra varios valores posibles.'}),(0,r.jsxs)(n.p,{children:["Buscar empleados que vivan en ",(0,r.jsx)(n.code,{children:'"Los Angeles"'})," o ",(0,r.jsx)(n.code,{children:'"C\xe1ceres"'}),":"]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.find(in("address.city", "Los Angeles", "C\xe1ceres")).iterator();\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "address.city": { $in: ["Los Angeles", "C\xe1ceres"] } })\n'})})})]}),(0,r.jsx)(n.admonition,{title:"NOTAS IMPORTANTES",type:"info",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Comparaci\xf3n de arrays:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Si el campo es un array, ",(0,r.jsx)(n.code,{children:"$in"})," verifica si alguno de los valores en el array coincide con los valores de la lista."]}),"\n",(0,r.jsxs)(n.li,{children:["Ejemplo:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.empleados.find({ "skills": { $in: ["Python", "SQL"] } })\n'})}),"\n","Esto coincide si el array ",(0,r.jsx)(n.code,{children:'"skills"'})," contiene ",(0,r.jsx)(n.code,{children:'"Python"'})," o ",(0,r.jsx)(n.code,{children:'"SQL"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Comparaci\xf3n exacta:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Si el campo no es un array, ",(0,r.jsx)(n.code,{children:"$in"})," compara directamente el valor del campo con los valores de la lista."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Escalabilidad:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$in"})," es \xfatil para realizar comparaciones m\xfaltiples en una sola consulta, reduciendo la necesidad de m\xfaltiples condiciones ",(0,r.jsx)(n.code,{children:"or"}),"."]}),"\n"]}),"\n"]}),"\n"]})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"4-actualizar-modificar-documentos",children:"4. Actualizar (Modificar documentos)"}),(0,r.jsxs)(n.p,{children:["Para actualizar documentos puedes utilizar la funci\xf3n ",(0,r.jsx)(n.code,{children:"updateOne()"})," para actualizar el primer documento que cumpla con el filtro indicado o ",(0,r.jsx)(n.code,{children:"updateMany"})," para actualizar todos los que cumplan el filtro."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'MongoDatabase database = mongoClient.getDatabase("empresa");\nMongoCollection<Person> collection = database.getCollection("empleados", Person.class);\n\nUpdateResult result = collection.updateOne(eq("full_name", "Jane Smith"), set("age", 40));\nSystem.out.println("Se han actualizado " + result.getModifiedCount() + " documentos.");\n'})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Operaciones b\xe1sicas"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operador $set"}),":\nModifica o agrega un campo al documento."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateOne(eq("title", "The Great Train Robbery"), set("director", "Edwin S. Porter"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateOne(\n  { "title": "The Great Train Robbery" },\n  { "$set": { "director": "Edwin S. Porter" } }\n)\n'})})})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operador $unset"}),":\nElimina un campo de un documento."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateOne(eq("title", "The Great Train Robbery"), unset("poster"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateOne(\n  { "title": "The Great Train Robbery" },\n  { "$unset": { "poster": "" } }\n)\n'})})})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operador $inc"}),":\nIncrementa o decrementa un valor num\xe9rico."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateOne(eq("title", "The Great Train Robbery"), inc("imdb.votes", 100));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateOne(\n  { "title": "The Great Train Robbery" },\n  { "$inc": { "imdb.votes": 100 } }\n)\n'})})})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operador $rename"}),":\nRenombra un campo."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateOne(eq("title", "The Great Train Robbery"), rename("director", "directors"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateOne(\n  { "title": "The Great Train Robbery" },\n  { "$rename": { "director": "directors" } }\n)\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Trabajando con Arrays"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operador $addToSet"}),":\nA\xf1ade un elemento a un array si no existe."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateOne(eq("title", "The Great Train Robbery"), addToSet("genres", "Adventure"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateOne(\n  { "title": "The Great Train Robbery" },\n  { "$addToSet": { "genres": "Adventure" } }\n)\n'})})})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operador $push"}),":\nA\xf1ade un elemento a un array (permitiendo duplicados)."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateOne(eq("title", "The Great Train Robbery"), push("genres", "Thriller"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateOne(\n  { "title": "The Great Train Robbery" },\n  { "$push": { "genres": "Thriller" } }\n)\n'})})})]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Operador $pull"}),":\nElimina elementos espec\xedficos de un array."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateMany(eq("genres", "Western"), pull("genres", "Western"));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateMany(\n  { "genres": "Western" },\n  { "$pull": { "genres": "Western" } }\n)\n'})})})]}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Opci\xf3n upsert"})}),(0,r.jsxs)(n.p,{children:["Con la opci\xf3n ",(0,r.jsx)(n.code,{children:"upsert: true"}),", se inserta un nuevo documento si no existe uno que coincida con el filtro."]}),(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"java",label:"Java",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'collection.updateOne(eq("title", "New Movie"),\n    set("year", 2023).append("rated", "PG"),\n    new UpdateOptions().upsert(true));\n'})})}),(0,r.jsx)(i.A,{value:"mongosh",label:"Mongosh",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.movies.updateOne(\n  { "title": "New Movie" },\n  { "$set": { "year": 2023, "rated": "PG" } },\n  { "upsert": true }\n)\n'})})})]}),(0,r.jsx)(n.admonition,{title:"actualizaci\xf3n de m\xfaltiples campos",type:"info",children:(0,r.jsxs)(n.p,{children:["Si vas a actualizar varios campos a la vez tendr\xe1s que usar ",(0,r.jsx)(n.code,{children:".append()"})," para concatenarlos, como en el ejemplo anterior."]})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"5-eliminar-borrar-documentos",children:"5. Eliminar (Borrar documentos)"}),(0,r.jsxs)(n.p,{children:["Siguiendo la misma l\xf3gica que con las actualizaciones, usaremos ",(0,r.jsx)(n.code,{children:"updateOne"})," para eliminar el primer documento que cumpla el filtro establecido y ",(0,r.jsx)(n.code,{children:"updateMany"})," para eliminar todos."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'MongoDatabase database = mongoClient.getDatabase("empresa");\nMongoCollection<Person> collection = database.getCollection("empleados", Person.class);\n\nDeleteResult result = collection.deleteMany(gt("age", 50));\nSystem.out.println("Se han eliminado " + result.getDeletedCount() + " documentos.");\n'})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h2,{id:"ejemplo-completo",children:"Ejemplo completo"}),(0,r.jsxs)(n.p,{children:["Vamos a utilizar la base de datos ",(0,r.jsx)(n.code,{children:"empresa"}),", que contiene la colecci\xf3n ",(0,r.jsx)(n.code,{children:"empleados"}),". Partimos de las clases de mapeo ",(0,r.jsx)(n.code,{children:"Person"})," y ",(0,r.jsx)(n.code,{children:"Address"})," creadas anteriormente. Vamos a implementar las clases:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EmpleadosRepository"}),": inicializa la conexi\xf3n con la base de datos mediante un Singleton e incluye las operaciones sobre la colecci\xf3n ",(0,r.jsx)(n.code,{children:"empleados"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EmpleadoFlieds"}),': clase de constantes para evitar errores relacionados con la repetici\xf3n y escritura incorrecta de los nombres de los campos en las consultas (como "full_name", "age", etc.).']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Main"})," como punto principal del programa."]}),"\n"]}),(0,r.jsxs)(n.p,{children:["Puedes descargar el JSON con los empleados ",(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(6787).A+"",children:"aqu\xed"}),"."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="database.EmpleadoFields.java"',children:'public final class EmpleadoFields {\n\n    public static final String DATABASE_NAME = "empresa";\n    public static final String EMPLEADOS_COLLECTION_NAME = "empleados";\n\n    public static final String FULL_NAME = "full_name";\n    public static final String AGE = "age";\n    public static final String ADDRESS = "address";\n    public static final String ADDRESS_CITY = ADDRESS + ".city";\n    public static final String ZIPCODE = "address.zipcode";\n    public static final String SKILLS = "skills";\n\n}\n'})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="database.EmpleadosRepository.java"',children:'import com.mongodb.MongoClientSettings;\nimport com.mongodb.MongoException;\nimport com.mongodb.client.*;\nimport com.mongodb.client.result.DeleteResult;\nimport com.mongodb.client.result.UpdateResult;\nimport org.bson.codecs.configuration.CodecRegistry;\nimport org.bson.codecs.pojo.PojoCodecProvider;\nimport org.example.model.Person;\n\nimport java.util.List;\n\nimport static com.mongodb.client.model.Filters.eq;\nimport static com.mongodb.client.model.Filters.gt;\nimport static com.mongodb.client.model.Projections.*;\nimport static com.mongodb.client.model.Updates.set;\nimport static org.bson.codecs.configuration.CodecRegistries.fromProviders;\nimport static org.bson.codecs.configuration.CodecRegistries.fromRegistries;\n\npublic class EmpleadosRepository {\n\n    private static EmpleadosRepository instance;\n    private MongoClient mongoClient;\n    MongoCollection<Person> collection;\n\n    private EmpleadosRepository() {\n        // MALA PR\xc1CTICA: sacar datos sensibles a un fichero .properties\n        String uri = "mongodb+srv://<db_user>:<db_pass>@<cluster>.mongodb.net/?retryWrites=true&w=majority&appName=ClusterADA";\n\n        CodecRegistry pojoCodecRegistry = fromRegistries(\n                MongoClientSettings.getDefaultCodecRegistry(),\n                fromProviders(PojoCodecProvider.builder().automatic(true).build())\n        );\n\n        MongoClientSettings settings = MongoClientSettings.builder()\n                .applyConnectionString(new com.mongodb.ConnectionString(uri))\n                .codecRegistry(pojoCodecRegistry)\n                .build();\n\n        mongoClient = MongoClients.create(settings);\n\n        // Recuperamos la base de datos\n        MongoDatabase database = mongoClient.getDatabase(EmpleadoFields.DATABASE_NAME);\n\n        // Recuperamos la colecci\xf3n, indicando que devuelve objetos de tipo Person\n        collection = database.getCollection(EmpleadoFields.EMPLEADOS_COLLECTION_NAME, Person.class);\n    }\n\n    public static EmpleadosRepository getInstance() {\n        if (instance == null) {\n            instance = new EmpleadosRepository();\n        }\n        return instance;\n    }\n\n    public void mostrarPersonas() {\n        // Leer documentos de MongoDB y convertirlos en POJOs\n        // Aqu\xed puedes a\xf1adirlos a otra lista o procesarlos como necesites...\n        try (MongoCursor<Person> cursor = collection.find().iterator()) {\n            while (cursor.hasNext()) {\n                Person currentPerson = cursor.next();\n                System.out.println(currentPerson);\n            }\n        } catch (MongoException me) {\n            System.err.println("Error al buscar empleados: " + me);\n        }\n    }\n\n    public void mostrarPersonasConProyeccion() {\n        FindIterable<Person> query = collection.find(eq(EmpleadoFields.ADDRESS_CITY, "Los Angeles"))\n                .projection(fields(include(EmpleadoFields.FULL_NAME, EmpleadoFields.AGE), excludeId()));\n\n        try (MongoCursor<Person> cursor = query.iterator()) {\n            while (cursor.hasNext()) {\n                Person currentPerson = cursor.next();\n                System.out.println(currentPerson);\n            }\n        } catch (MongoException me) {\n            System.err.println("Error al buscar empleados: " + me);\n        }\n    }\n\n\n    public void insertarPersona(Person persona) {\n        collection.insertOne(persona);\n    }\n\n    public void insertarPersonas(List<Person> personas) {\n        collection.insertMany(personas);\n    }\n\n    // Actualiza la edad de la persona cuyo nombre coincide con el indicado por par\xe1metro\n    public void actualizarPersona(String nombre, int edad) {\n        UpdateResult result = collection.updateOne(\n                eq(EmpleadoFields.FULL_NAME, nombre),\n                set(EmpleadoFields.AGE, edad)\n        );\n        System.out.println("Se han actualizado " + result.getModifiedCount() + " documentos.");\n    }\n\n\n    // Elimina las personas mayores de la edad indicada\n    public void eliminarPersonasPorEdad(int edad) {\n        DeleteResult result = collection.deleteMany(gt(EmpleadoFields.AGE, edad));\n        System.out.println("Se han eliminado " + result.getDeletedCount() + " documentos.");\n    }\n\n    // M\xe9todo para cerrar el cliente al apagar la aplicaci\xf3n\n    public void closeMongoClient() {\n        if (mongoClient != null) {\n            mongoClient.close();\n        }\n    }\n}\n'})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="Main.java"',children:'public class Main {\n\n    private static Person crearPersona() {\n        Address direccion = new Address("C\xe1ceres", "10004");\n\n        List<String> skills = new ArrayList<>();\n        skills.add("Java");\n        skills.add("MongoDB");\n\n        return new Person("Pedro P\xe9rez", 30, direccion, skills);\n    }\n\n    public static void main(String[] args) {\n        // Insertamos una persona\n        Person persona = crearPersona();\n        EmpleadosRepository.getInstance().insertarPersona(persona);\n\n        // Mostramos todas las personas\n        EmpleadosRepository.getInstance().mostrarPersonas();\n\n        // Eliminamos los mayores de 50\n        EmpleadosRepository.getInstance().eliminarPersonasPorEdad(50);\n\n        // Actualizamos la edad de Jane Smith\n        EmpleadosRepository.getInstance().actualizarPersona("Jane Smith", 20);\n\n        // Cerramos la conexi\xf3n\n        EmpleadosRepository.getInstance().closeMongoClient();\n    }\n}\n'})}),(0,r.jsx)(n.h2,{id:"ejercicio",children:"Ejercicio"}),(0,r.jsx)(n.p,{children:"Una librer\xeda necesita almacenar en MongoDB la informaci\xf3n sobre los libros disponibles:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"De cada libro conocemos su t\xedtulo, autor, g\xe9neros (puede tener uno o varios), precio, stock y fecha de publicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"De cada autor conocemos su nombre y nacionalidad."}),"\n"]}),(0,r.jsx)(n.p,{children:"Deber\xe1s desarrollar un programa Java que permita realizar las siguientes operaciones:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Crear nuevos libros y almacenarlos en la base de datos."}),"\n",(0,r.jsx)(n.li,{children:"Listar todos los libros disponibles."}),"\n",(0,r.jsx)(n.li,{children:"Buscar libros seg\xfan el g\xe9nero."}),"\n",(0,r.jsx)(n.li,{children:"Buscar los libros publicados antes de la fecha que diga el usuario."}),"\n",(0,r.jsx)(n.li,{children:"Buscar los libros ordenador por precio de forma ascendente. Ante igual precio se debe ordenar por fecha de publicaci\xf3n."}),"\n",(0,r.jsx)(n.li,{children:"Actualizar el precio del libro/libros cuyo nombre coincida con el indicado por el usuario."}),"\n",(0,r.jsx)(n.li,{children:"Eliminar libros que ya no est\xe1n disponibles (no hay stock)."}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},9365:(e,n,s)=>{s.d(n,{A:()=>l});s(6540);var a=s(4164);const r={tabItem:"tabItem_Ymn6"};var o=s(4848);function l(e){let{children:n,hidden:s,className:l}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,l),hidden:s,children:n})}},1470:(e,n,s)=>{s.d(n,{A:()=>A});var a=s(6540),r=s(4164),o=s(3104),l=s(6347),i=s(205),c=s(7485),d=s(1682),t=s(679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:s}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:s,attributes:a,default:r}}=e;return{value:n,label:s,attributes:a,default:r}}))}(s);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function j(e){let{value:n,tabValues:s}=e;return s.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:s}=e;const r=(0,l.W6)(),o=function(e){let{queryString:n=!1,groupId:s}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:n,groupId:s});return[(0,c.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,o=h(e),[l,c]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!j({value:n,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=s.find((e=>e.default))??s[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[d,u]=p({queryString:s,groupId:r}),[x,m]=function(e){let{groupId:n}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,t.Dv)(s);return[r,(0,a.useCallback)((e=>{s&&o.set(e)}),[s,o])]}({groupId:r}),g=(()=>{const e=d??x;return j({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{g&&c(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!j({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),m(e)}),[u,m,o]),tabValues:o}}var m=s(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=s(4848);function v(e){let{className:n,block:s,selectedValue:a,selectValue:l,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),t=e=>{const n=e.currentTarget,s=c.indexOf(n),r=i[s].value;r!==a&&(d(n),l(r))},u=e=>{let n=null;switch(e.key){case"Enter":t(e);break;case"ArrowRight":{const s=c.indexOf(e.currentTarget)+1;n=c[s]??c[0];break}case"ArrowLeft":{const s=c.indexOf(e.currentTarget)-1;n=c[s]??c[c.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":s},n),children:i.map((e=>{let{value:n,label:s,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>c.push(e),onKeyDown:u,onClick:t,...o,className:(0,r.A)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":a===n}),children:s??n},n)}))})}function f(e){let{lazy:n,children:s,selectedValue:o}=e;const l=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function y(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,b.jsx)(v,{...n,...e}),(0,b.jsx)(f,{...n,...e})]})}function A(e){const n=(0,m.A)();return(0,b.jsx)(y,{...e,children:u(e.children)},String(n))}},6787:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/files/empresa-082dfdcdec698906a781015ea4d3515a.json"},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var a=s(6540);const r={},o=a.createContext(r);function l(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);